------- FILE C:\Atari2600\Projects\race\race\default.bas.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE C:\Atari2600\Projects\race\race\default.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE C:\Atari2600\Projects\race\race\default.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 d7	    badguymph  =	b
      4  10000 ????
      5  10000 ????		00 d6	    mph        =	a
      6  10000 ????
      7  10000 ????		00 d8	    timer      =	c
      8  10000 ????
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    temp7      =	$D4	; This is used to aid in bankswitching
    101  10000 ????
    102  10000 ????		00 d5	    playfieldpos =	$D5
    103  10000 ????
    104  10000 ????		00 d6	    A	       =	$d6
    105  10000 ????		00 d6	    a	       =	$d6
    106  10000 ????		00 d7	    B	       =	$d7
    107  10000 ????		00 d7	    b	       =	$d7
    108  10000 ????		00 d8	    C	       =	$d8
    109  10000 ????		00 d8	    c	       =	$d8
    110  10000 ????		00 d9	    D	       =	$d9
    111  10000 ????		00 d9	    d	       =	$d9
    112  10000 ????		00 da	    E	       =	$da
    113  10000 ????		00 da	    e	       =	$da
    114  10000 ????		00 db	    F	       =	$db
    115  10000 ????		00 db	    f	       =	$db
    116  10000 ????		00 dc	    G	       =	$dc
    117  10000 ????		00 dc	    g	       =	$dc
    118  10000 ????		00 dd	    H	       =	$dd
    119  10000 ????		00 dd	    h	       =	$dd
    120  10000 ????		00 de	    I	       =	$de
    121  10000 ????		00 de	    i	       =	$de
    122  10000 ????		00 df	    J	       =	$df
    123  10000 ????		00 df	    j	       =	$df
    124  10000 ????		00 e0	    K	       =	$e0
    125  10000 ????		00 e0	    k	       =	$e0
    126  10000 ????		00 e1	    L	       =	$e1
    127  10000 ????		00 e1	    l	       =	$e1
    128  10000 ????		00 e2	    M	       =	$e2
    129  10000 ????		00 e2	    m	       =	$e2
    130  10000 ????		00 e3	    N	       =	$e3
    131  10000 ????		00 e3	    n	       =	$e3
    132  10000 ????		00 e4	    O	       =	$e4
    133  10000 ????		00 e4	    o	       =	$e4
    134  10000 ????		00 e5	    P	       =	$e5
    135  10000 ????		00 e5	    p	       =	$e5
    136  10000 ????		00 e6	    Q	       =	$e6
    137  10000 ????		00 e6	    q	       =	$e6
    138  10000 ????		00 e7	    R	       =	$e7
    139  10000 ????		00 e7	    r	       =	$e7
    140  10000 ????		00 e8	    S	       =	$e8
    141  10000 ????		00 e8	    s	       =	$e8
    142  10000 ????		00 e9	    T	       =	$e9
    143  10000 ????		00 e9	    t	       =	$e9
    144  10000 ????		00 ea	    U	       =	$ea
    145  10000 ????		00 ea	    u	       =	$ea
    146  10000 ????		00 eb	    V	       =	$eb
    147  10000 ????		00 eb	    v	       =	$eb
    148  10000 ????		00 ec	    W	       =	$ec
    149  10000 ????		00 ec	    w	       =	$ec
    150  10000 ????		00 ed	    X	       =	$ed
    151  10000 ????		00 ed	    x	       =	$ed
    152  10000 ????		00 ee	    Y	       =	$ee
    153  10000 ????		00 ee	    y	       =	$ee
    154  10000 ????		00 ef	    Z	       =	$ef
    155  10000 ????		00 ef	    z	       =	$ef
    156  10000 ????
    157  10000 ????						; available for other uses, or if unused, provide more stack space
    158  10000 ????
    159  10000 ????		00 f0	    aux1       =	$f0
    160  10000 ????		00 f1	    aux2       =	$f1
    161  10000 ????		00 f2	    aux3       =	$f2
    162  10000 ????		00 f3	    aux4       =	$f3
    163  10000 ????		00 f4	    aux5       =	$f4
    164  10000 ????		00 f5	    aux6       =	$f5
    165  10000 ????
    166  10000 ????						; playfield color/height pointers
    167  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    168  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    169  10000 ????						; the above pointers are the same because if color and height are both used together,
    170  10000 ????						; they must used absolute indexed and cannot use pointers
    171  10000 ????
    172  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    173  10000 ????						; upper 3 bits of $f2 contain the number of lives
    174  10000 ????		00 f4	    lifecolor  =	$f4
    175  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    176  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    177  10000 ????
    178  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    179  10000 ????		00 f3	    pfscore2   =	$f3
    180  10000 ????		00 f4	    pfscorecolor =	$f4
    181  10000 ????
    182  10000 ????		00 f6	    stack1     =	$f6
    183  10000 ????		00 f7	    stack2     =	$f7
    184  10000 ????		00 f8	    stack3     =	$f8
    185  10000 ????		00 f9	    stack4     =	$f9
    186  10000 ????						; the stack bytes above may be used in the kernel
    187  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    188  10000 ????
    189  10000 ????				       MAC	return
    190  10000 ????				       ifnconst	bankswitch
    191  10000 ????				       rts
    192  10000 ????				       else
    193  10000 ????				       jmp	BS_return
    194  10000 ????				       endif
    195  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    196  10000 ????
    197  10000 ????			   -	       ifconst	superchip
    198  10000 ????			   -playfieldbase =	$10D0
    199  10000 ????			   -	       include	superchip.h
    200  10000 ????				       else
    201  10000 ????		00 a4	    playfieldbase =	$A4
    202  10000 ????				       endif
    203  10000 ????
    204  10000 ????				       ifnconst	pfhalfwidth
    205  10000 ????		00 04	    pfwidth    =	4
    206  10000 ????		00 0e	    PF1L       =	PF1
    207  10000 ????		00 0f	    PF2L       =	PF2
    208  10000 ????		00 0e	    PF1R       =	PF1
    209  10000 ????		00 0f	    PF2R       =	PF2
    210  10000 ????		00 00	    pfadjust   =	0
    211  10000 ????			   -	       else
    212  10000 ????			   -pfwidth    =	2
    213  10000 ????			   -	       ifconst	pfcenter
    214  10000 ????			   -PF1L       =	$3F	; no effect
    215  10000 ????			   -PF2L       =	PF2
    216  10000 ????			   -PF1R       =	$3F
    217  10000 ????			   -PF2R       =	PF2	; no effect
    218  10000 ????			   -pfadjust   =	1
    219  10000 ????			   -	       else
    220  10000 ????			   -PF1L       =	PF1
    221  10000 ????			   -PF2L       =	PF2
    222  10000 ????			   -PF1R       =	$3F	; no effect
    223  10000 ????			   -PF2R       =	$3F	; no effect
    224  10000 ????			   -pfadjust   =	0
    225  10000 ????			   -	       endif
    226  10000 ????				       endif
    227  10000 ????
    228  10000 ????						; define playfield start based on height
    229  10000 ????				       ifnconst	pfres
    230  10000 ????		00 a4	    playfield  =	playfieldbase
    231  10000 ????			   -	       else
    232  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    233  10000 ????				       endif
------- FILE C:\Atari2600\Projects\race\race\default.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 d7	    badguymph  =	b
      4  10000 ????
      5  10000 ????		00 d6	    mph        =	a
      6  10000 ????
      7  10000 ????		00 d8	    timer      =	c
      8  10000 ????
------- FILE C:\Atari2600\Projects\race\race\default.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 d5		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c 7e f4 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 d5		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 d5		      sbc	playfieldpos
    166  f07e		       85 d5		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d6 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4					      ifnconst	player1colors
    227  f0b4		       a5 87		      lda	missile1height	;3
    228  f0b6		       c7 88		      dcp	missile1y	;5
    229  f0b8		       2a		      rol		;2
    230  f0b9		       2a		      rol		;2
    231  f0ba		       85 1e		      sta	ENAM1	;3
    232  f0bc				  -	      else
    233  f0bc				  -	      lda	(player1color),y
    234  f0bc				  -	      sta	COLUP1
    235  f0bc				  -	      ifnconst	playercolors
    236  f0bc				  -	      sleep	7
    237  f0bc				  -	      else
    238  f0bc				  -	      lda.w	player0colorstore
    239  f0bc				  -	      sta	COLUP0
    240  f0bc				  -	      endif
    241  f0bc					      endif
    242  f0bc
    243  f0bc				  -	      ifconst	pfres
    244  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bc				  -	      sta	PF1L	;3
    246  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bc				  -	      sta	PF2L	;3
    248  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bc				  -	      sta	PF1R	; 3 too early?
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bc				  -	      sta	PF2R	;3
    252  f0bc					      else
    253  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0be		       85 0e		      sta	PF1L	;3
    255  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c2		       85 0f		      sta	PF2L	;3
    257  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0ca		       85 0f		      sta	PF2R	;3
    261  f0cc					      endif
    262  f0cc							; sleep 3
    263  f0cc
    264  f0cc		       a5 8e		      lda	player0height
    265  f0ce		       c7 85		      dcp	player0y
    266  f0d0		       90 b1		      bcc	.skipDrawP0
    267  f0d2		       a4 85		      ldy	player0y
    268  f0d4		       b1 8a		      lda	(player0pointer),y
    269  f0d6				   .continueP0
    270  f0d6		       85 1b		      sta	GRP0
    271  f0d8
    272  f0d8					      ifnconst	no_blank_lines
    273  f0d8					      ifnconst	playercolors
    274  f0d8		       a5 90		      lda	missile0height	;3
    275  f0da		       c7 91		      dcp	missile0y	;5
    276  f0dc		       e5 f6		      sbc	stack1
    277  f0de		       85 1d		      sta	ENAM0	;3
    278  f0e0				  -	      else
    279  f0e0				  -	      lda	(player0color),y
    280  f0e0				  -	      sta	player0colorstore
    281  f0e0				  -	      sleep	6
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef				  -	      ifconst	PFcolors
    397  f0ef				  -	      tay
    398  f0ef				  -	      lda	(pfcolortable),y
    399  f0ef				  -	      ifnconst	backgroundchange
    400  f0ef				  -	      sta	COLUPF
    401  f0ef				  -	      else
    402  f0ef				  -	      sta	COLUBK
    403  f0ef				  -	      endif
    404  f0ef				  -	      ifconst	pfrowheight
    405  f0ef				  -	      lda	#pfrowheight
    406  f0ef				  -	      else
    407  f0ef				  -	      ifnconst	pfres
    408  f0ef				  -	      lda	#8
    409  f0ef				  -	      else
    410  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0ef				  -	      endif
    412  f0ef				  -	      endif
    413  f0ef				  -	      sta	temp1
    414  f0ef					      endif
    415  f0ef					      ifnconst	PFcolorandheight
    416  f0ef					      ifnconst	PFcolors
    417  f0ef					      ifnconst	PFheights
    418  f0ef					      ifnconst	no_blank_lines
    419  f0ef							; read paddle 0
    420  f0ef							; lo-res paddle read
    421  f0ef							; bit INPT0
    422  f0ef							; bmi paddleskipread
    423  f0ef							; inc paddle0
    424  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    426  f0f4				  -	      ifconst	pfrowheight
    427  f0f4				  -	      lda	#pfrowheight
    428  f0f4					      else
    429  f0f4					      ifnconst	pfres
    430  f0f4		       a9 08		      lda	#8
    431  f0f6				  -	      else
    432  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f6					      endif
    434  f0f6					      endif
    435  f0f6		       85 9c		      sta	temp1
    436  f0f8					      endif
    437  f0f8					      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    454  f106				  -	      else
    455  f106				  -	      ldy	#124
    456  f106				  -	      lda	(pfcolortable),y
    457  f106				  -	      sta	COLUPF
    458  f106					      endif
    459  f106
    460  f106				  -	      ifconst	PFheights
    461  f106				  -	      ldx	#1
    462  f106				  -			;sleep 4
    463  f106				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f106					      else
    465  f106		       a6 d5		      ldx	playfieldpos
    466  f108							;sleep 3
      0  f108					      sleep	2	; REVENG - this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    468  f109					      endif
    469  f109
    470  f109		       4c 27 f1 	      jmp	enterlastkernel
    471  f10c
    472  f10c				  -	      else
    473  f10c				  -lastkernelline
    474  f10c				  -
    475  f10c				  -	      ifconst	PFheights
    476  f10c				  -	      ldx	#1
    477  f10c				  -			;sleep 5
    478  f10c				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10c				  -	      else
    480  f10c				  -	      ldx	playfieldpos
    481  f10c				  -			;sleep 4
    482  f10c				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10c				  -	      endif
    484  f10c				  -
    485  f10c				  -	      cpx	#0
    486  f10c				  -	      bne	.enterfromNBL
    487  f10c				  -	      jmp	no_blank_lines_bailout
    488  f10c					      endif
    489  f10c
    490  f10c				  -	      if	((<*)>$d5)
    491  f10c				  -	      align	256
    492  f10c					      endif
    493  f10c							; this is a kludge to prevent page wrapping - fix!!!
    494  f10c
    495  f10c				   .skipDrawlastP1
      0  f10c					      sleep	2
      1  f10c				   .CYCLES    SET	2
      2  f10c
      3  f10c				  -	      IF	.CYCLES < 2
      4  f10c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f10c				  -	      ERR
      6  f10c					      ENDIF
      7  f10c
      8  f10c				  -	      IF	.CYCLES & 1
      9  f10c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f10c				  -	      nop	0
     11  f10c				  -	      ELSE
     12  f10c				  -	      bit	VSYNC
     13  f10c				  -	      ENDIF
     14  f10c				  -.CYCLES    SET	.CYCLES - 3
     15  f10c					      ENDIF
     16  f10c
     17  f10c					      REPEAT	.CYCLES / 2
     18  f10c		       ea		      nop
     19  f10d					      REPEND
    497  f10d		       a9 00		      lda	#0
    498  f10f		       4c 39 f1 	      jmp	.continuelastP1
    499  f112
    500  f112				   .endkerloop		; enter at cycle 59??
    501  f112
    502  f112		       ea		      nop
    503  f113
    504  f113				   .enterfromNBL
    505  f113				  -	      ifconst	pfres
    506  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f113				  -	      sty	PF1L	;3
    508  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f113				  -	      sty	PF2L	;3
    510  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f113				  -	      sty	PF1R	; possibly too early?
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f113				  -	      sty	PF2R	;3
    514  f113					      else
    515  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f116		       84 0e		      sty	PF1L	;3
    517  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11b		       84 0f		      sty	PF2L	;3
    519  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f120		       84 0e		      sty	PF1R	; possibly too early?
    521  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f125		       84 0f		      sty	PF2R	;3
    523  f127					      endif
    524  f127
    525  f127				   enterlastkernel
    526  f127		       a5 92		      lda	ballheight
    527  f129
    528  f129							; tya
    529  f129		       c7 89		      dcp	bally
    530  f12b							; sleep 4
    531  f12b
    532  f12b							; sbc stack3
    533  f12b		       2a		      rol
    534  f12c		       2a		      rol
    535  f12d		       85 1f		      sta	ENABL
    536  f12f
    537  f12f		       a5 8f		      lda	player1height	;3
    538  f131		       c7 86		      dcp	player1y	;5
    539  f133		       90 d7		      bcc	.skipDrawlastP1
    540  f135		       a4 86		      ldy	player1y	;3
    541  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f139							; so it doesn't cross a page boundary!
    543  f139
    544  f139				   .continuelastP1
    545  f139		       85 1c		      sta	GRP1	;3
    546  f13b
    547  f13b					      ifnconst	player1colors
    548  f13b		       a5 87		      lda	missile1height	;3
    549  f13d		       c7 88		      dcp	missile1y	;5
    550  f13f				  -	      else
    551  f13f				  -	      lda	(player1color),y
    552  f13f				  -	      sta	COLUP1
    553  f13f					      endif
    554  f13f
    555  f13f		       ca		      dex
    556  f140							;dec temp4 ; might try putting this above PF writes
    557  f140		       f0 36		      beq	endkernel
    558  f142
    559  f142
    560  f142				  -	      ifconst	pfres
    561  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f142				  -	      sty	PF1L	;3
    563  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f142				  -	      sty	PF2L	;3
    565  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f142				  -	      sty	PF1R	; possibly too early?
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f142				  -	      sty	PF2R	;3
    569  f142					      else
    570  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f145		       84 0e		      sty	PF1L	;3
    572  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14a		       84 0f		      sty	PF2L	;3
    574  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f14f		       84 0e		      sty	PF1R	; possibly too early?
    576  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f154		       84 0f		      sty	PF2R	;3
    578  f156					      endif
    579  f156
    580  f156					      ifnconst	player1colors
    581  f156		       2a		      rol		;2
    582  f157		       2a		      rol		;2
    583  f158		       85 1e		      sta	ENAM1	;3
    584  f15a				  -	      else
    585  f15a				  -	      ifnconst	playercolors
    586  f15a				  -	      sleep	7
    587  f15a				  -	      else
    588  f15a				  -	      lda.w	player0colorstore
    589  f15a				  -	      sta	COLUP0
    590  f15a				  -	      endif
    591  f15a					      endif
    592  f15a
    593  f15a		       ad 8e 00 	      lda.w	player0height
    594  f15d		       c7 85		      dcp	player0y
    595  f15f		       90 11		      bcc	.skipDrawlastP0
    596  f161		       a4 85		      ldy	player0y
    597  f163		       b1 8a		      lda	(player0pointer),y
    598  f165				   .continuelastP0
    599  f165		       85 1b		      sta	GRP0
    600  f167
    601  f167
    602  f167
    603  f167					      ifnconst	no_blank_lines
    604  f167		       a5 90		      lda	missile0height	;3
    605  f169		       c7 91		      dcp	missile0y	;5
    606  f16b		       e5 f6		      sbc	stack1
    607  f16d		       85 1d		      sta	ENAM0	;3
    608  f16f		       4c 12 f1 	      jmp	.endkerloop
    609  f172				  -	      else
    610  f172				  -	      ifconst	readpaddle
    611  f172				  -	      ldy	currentpaddle
    612  f172				  -	      lda	INPT0,y
    613  f172				  -	      bpl	noreadpaddle2
    614  f172				  -	      inc	paddle
    615  f172				  -	      jmp	.endkerloop
    616  f172				  -noreadpaddle2
    617  f172				  -	      sleep	4
    618  f172				  -	      jmp	.endkerloop
    619  f172				  -	      else		; no_blank_lines and no paddle reading
    620  f172				  -	      pla
    621  f172				  -	      pha		; 14 cycles in 4 bytes
    622  f172				  -	      pla
    623  f172				  -	      pha
    624  f172				  -			; sleep 14
    625  f172				  -	      jmp	.endkerloop
    626  f172				  -	      endif
    627  f172					      endif
    628  f172
    629  f172
    630  f172							; ifconst donepaddleskip
    631  f172							;paddleskipread
    632  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f172							; plus we get a lo-res paddle read
    634  f172							; bmi donepaddleskip
    635  f172							; endif
    636  f172
    637  f172				   .skipDrawlastP0
      0  f172					      sleep	2
      1  f172				   .CYCLES    SET	2
      2  f172
      3  f172				  -	      IF	.CYCLES < 2
      4  f172				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f172				  -	      ERR
      6  f172					      ENDIF
      7  f172
      8  f172				  -	      IF	.CYCLES & 1
      9  f172				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f172				  -	      nop	0
     11  f172				  -	      ELSE
     12  f172				  -	      bit	VSYNC
     13  f172				  -	      ENDIF
     14  f172				  -.CYCLES    SET	.CYCLES - 3
     15  f172					      ENDIF
     16  f172
     17  f172					      REPEAT	.CYCLES / 2
     18  f172		       ea		      nop
     19  f173					      REPEND
    639  f173		       a9 00		      lda	#0
    640  f175		       4c 65 f1 	      jmp	.continuelastP0
    641  f178
    642  f178				  -	      ifconst	no_blank_lines
    643  f178				  -no_blank_lines_bailout
    644  f178				  -	      ldx	#0
    645  f178					      endif
    646  f178
    647  f178				   endkernel
    648  f178							; 6 digit score routine
    649  f178		       86 0e		      stx	PF1
    650  f17a		       86 0f		      stx	PF2
    651  f17c		       86 0d		      stx	PF0
    652  f17e		       18		      clc
    653  f17f
    654  f17f				  -	      ifconst	pfrowheight
    655  f17f				  -	      lda	#pfrowheight+2
    656  f17f					      else
    657  f17f					      ifnconst	pfres
    658  f17f		       a9 0a		      lda	#10
    659  f181				  -	      else
    660  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f181					      endif
    662  f181					      endif
    663  f181
    664  f181		       e5 d5		      sbc	playfieldpos
    665  f183		       85 d5		      sta	playfieldpos
    666  f185		       8a		      txa
    667  f186
    668  f186				  -	      ifconst	shakescreen
    669  f186				  -	      bit	shakescreen
    670  f186				  -	      bmi	noshakescreen2
    671  f186				  -	      ldx	#$3D
    672  f186				  -noshakescreen2
    673  f186					      endif
    674  f186
    675  f186		       95 02		      sta	WSYNC,x
    676  f188
    677  f188							; STA WSYNC ;first one, need one more
    678  f188		       85 0b		      sta	REFP0
    679  f18a		       85 0c		      sta	REFP1
    680  f18c		       85 1b		      STA	GRP0
    681  f18e		       85 1c		      STA	GRP1
    682  f190							; STA PF1
    683  f190							; STA PF2
    684  f190		       85 2b		      sta	HMCLR
    685  f192		       85 1d		      sta	ENAM0
    686  f194		       85 1e		      sta	ENAM1
    687  f196		       85 1f		      sta	ENABL
    688  f198
    689  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19a		       85 85		      sta	player0y
    691  f19c		       a5 9e		      lda	temp3
    692  f19e		       85 86		      sta	player1y
    693  f1a0					      ifnconst	player1colors
    694  f1a0		       a5 a1		      lda	temp6
    695  f1a2		       85 88		      sta	missile1y
    696  f1a4					      endif
    697  f1a4					      ifnconst	playercolors
    698  f1a4					      ifnconst	readpaddle
    699  f1a4		       a5 a0		      lda	temp5
    700  f1a6		       85 91		      sta	missile0y
    701  f1a8					      endif
    702  f1a8					      endif
    703  f1a8		       a5 f7		      lda	stack2
    704  f1aa		       85 89		      sta	bally
    705  f1ac
    706  f1ac							; REVENG - strangely, this isn't required any more. might have
    707  f1ac							; resulted from the no_blank_lines score bounce fix
    708  f1ac							;ifconst no_blank_lines
    709  f1ac							;sta WSYNC
    710  f1ac							;endif
    711  f1ac
    712  f1ac		       ad 84 02 	      lda	INTIM
    713  f1af		       18		      clc
    714  f1b0					      ifnconst	vblank_time
    715  f1b0		       69 8e		      adc	#43+12+87
    716  f1b2				  -	      else
    717  f1b2				  -	      adc	#vblank_time+12+87
    718  f1b2				  -
    719  f1b2					      endif
    720  f1b2							; sta WSYNC
    721  f1b2		       8d 96 02 	      sta	TIM64T
    722  f1b5
    723  f1b5				  -	      ifconst	minikernel
    724  f1b5				  -	      jsr	minikernel
    725  f1b5					      endif
    726  f1b5
    727  f1b5							; now reassign temp vars for score pointers
    728  f1b5
    729  f1b5							; score pointers contain:
    730  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1b5							; swap lo2->temp1
    732  f1b5							; swap lo4->temp3
    733  f1b5							; swap lo6->temp5
    734  f1b5					      ifnconst	noscore
    735  f1b5		       a5 97		      lda	scorepointers+1
    736  f1b7							; ldy temp1
    737  f1b7		       85 9c		      sta	temp1
    738  f1b9							; sty scorepointers+1
    739  f1b9
    740  f1b9		       a5 99		      lda	scorepointers+3
    741  f1bb							; ldy temp3
    742  f1bb		       85 9e		      sta	temp3
    743  f1bd							; sty scorepointers+3
    744  f1bd
    745  f1bd
    746  f1bd		       85 2b		      sta	HMCLR
    747  f1bf		       ba		      tsx
    748  f1c0		       86 f6		      stx	stack1
    749  f1c2		       a2 e0		      ldx	#$E0
    750  f1c4		       86 20		      stx	HMP0
    751  f1c6
    752  f1c6		       a5 a3		      LDA	scorecolor
    753  f1c8		       85 06		      STA	COLUP0
    754  f1ca		       85 07		      STA	COLUP1
    755  f1cc				  -	      ifconst	scorefade
    756  f1cc				  -	      STA	stack2
    757  f1cc					      endif
    758  f1cc				  -	      ifconst	pfscore
    759  f1cc				  -	      lda	pfscorecolor
    760  f1cc				  -	      sta	COLUPF
    761  f1cc					      endif
    762  f1cc		       85 02		      sta	WSYNC
    763  f1ce		       a2 00		      ldx	#0
    764  f1d0		       86 1b		      STx	GRP0
    765  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    766  f1d4
    767  f1d4		       a5 9b		      lda	scorepointers+5
    768  f1d6							; ldy temp5
    769  f1d6		       95 a0		      sta	temp5,x
    770  f1d8							; sty scorepointers+5
    771  f1d8		       a9 ff		      lda	#>scoretable
    772  f1da		       85 97		      sta	scorepointers+1
    773  f1dc		       85 99		      sta	scorepointers+3
    774  f1de		       85 9b		      sta	scorepointers+5
    775  f1e0		       85 9d		      sta	temp2
    776  f1e2		       85 9f		      sta	temp4
    777  f1e4		       85 a1		      sta	temp6
    778  f1e6		       a0 07		      LDY	#7
    779  f1e8		       84 25		      STY	VDELP0
    780  f1ea		       85 10		      STA	RESP0
    781  f1ec		       85 11		      STA	RESP1
    782  f1ee
    783  f1ee
    784  f1ee		       a9 03		      LDA	#$03
    785  f1f0		       85 04		      STA	NUSIZ0
    786  f1f2		       85 05		      STA	NUSIZ1
    787  f1f4		       85 26		      STA	VDELP1
    788  f1f6		       a9 f0		      LDA	#$F0
    789  f1f8		       85 21		      STA	HMP1
    790  f1fa		       b1 96		      lda	(scorepointers),y
    791  f1fc		       85 1b		      sta	GRP0
    792  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    793  f200		       4c 0b f2 	      jmp	beginscore
    794  f203
    795  f203
    796  f203				  -	      if	((<*)>$d4)
    797  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f203					      endif
    799  f203
    800  f203				   loop2
    801  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    802  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f207				  -	      ifconst	pfscore
    804  f207				  -	      lda.w	pfscore1
    805  f207				  -	      sta	PF1
    806  f207					      else
    807  f207				  -	      ifconst	scorefade
    808  f207				  -	      sleep	2
    809  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    812  f20b					      endif
    813  f20b					      endif
    814  f20b							; cycle 0
    815  f20b				   beginscore
    816  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    817  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    819  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    821  f215		       9a		      txs
    822  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    823  f218				  -	      ifconst	scorefade
    824  f218				  -	      lda	stack2
    825  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    827  f21a					      endif
    828  f21a
    829  f21a				  -	      ifconst	pfscore
    830  f21a				  -	      lda	pfscore2
    831  f21a				  -	      sta	PF1
    832  f21a					      else
    833  f21a				  -	      ifconst	scorefade
    834  f21a				  -	      sta	COLUP0
    835  f21a				  -	      sta	COLUP1
    836  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    838  f21d					      endif
    839  f21d					      endif
    840  f21d
    841  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    842  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f221		       ba		      tsx
    844  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f228		       88		      dey
    848  f229		       10 d8		      bpl	loop2	;+2 60 180
    849  f22b
    850  f22b		       a6 f6		      ldx	stack1
    851  f22d		       9a		      txs
    852  f22e							; lda scorepointers+1
    853  f22e		       a4 9c		      ldy	temp1
    854  f230							; sta temp1
    855  f230		       84 97		      sty	scorepointers+1
    856  f232
    857  f232		       a9 00		      LDA	#0
    858  f234		       85 0e		      sta	PF1
    859  f236		       85 1b		      STA	GRP0
    860  f238		       85 1c		      STA	GRP1
    861  f23a		       85 25		      STA	VDELP0
    862  f23c		       85 26		      STA	VDELP1	;do we need these
    863  f23e		       85 04		      STA	NUSIZ0
    864  f240		       85 05		      STA	NUSIZ1
    865  f242
    866  f242							; lda scorepointers+3
    867  f242		       a4 9e		      ldy	temp3
    868  f244							; sta temp3
    869  f244		       84 99		      sty	scorepointers+3
    870  f246
    871  f246							; lda scorepointers+5
    872  f246		       a4 a0		      ldy	temp5
    873  f248							; sta temp5
    874  f248		       84 9b		      sty	scorepointers+5
    875  f24a					      endif		;noscore
    876  f24a		       a9 c2		      LDA	#%11000010
    877  f24c		       85 02		      sta	WSYNC
    878  f24e		       85 01		      STA	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    880  f251
    881  f251				  -	      ifconst	shakescreen
    882  f251				  -doshakescreen
    883  f251				  -	      bit	shakescreen
    884  f251				  -	      bmi	noshakescreen
    885  f251				  -	      sta	WSYNC
    886  f251				  -noshakescreen
    887  f251				  -	      ldx	missile0height
    888  f251				  -	      inx
    889  f251				  -	      rts
    890  f251					      endif
    891  f251
    892  f251							; playfield drawing routines
    893  f251							; you get a 32x12 bitmapped display in a single color :)
    894  f251							; 0-31 and 0-11
    895  f251
    896  f251				   pfclear		; clears playfield - or fill with pattern
    897  f251				  -	      ifconst	pfres
    898  f251				  -	      ldx	#pfres*pfwidth-1
    899  f251					      else
    900  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f253					      endif
    902  f253				   pfclear_loop
    903  f253					      ifnconst	superchip
    904  f253		       95 a4		      sta	playfield,x
    905  f255				  -	      else
    906  f255				  -	      sta	playfield-128,x
    907  f255					      endif
    908  f255		       ca		      dex
    909  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    911  f259
    912  f259				   setuppointers
    913  f259		       86 9d		      stx	temp2	; store on.off.flip value
    914  f25b		       aa		      tax		; put x-value in x
    915  f25c		       4a		      lsr
    916  f25d		       4a		      lsr
    917  f25e		       4a		      lsr		; divide x pos by 8
    918  f25f		       85 9c		      sta	temp1
    919  f261		       98		      tya
    920  f262		       0a		      asl
    921  f263					      if	pfwidth=4
    922  f263		       0a		      asl		; multiply y pos by 4
    923  f264					      endif		; else multiply by 2
    924  f264		       18		      clc
    925  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f267		       a8		      tay		; put the value in y
    927  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f26a		       60		      rts
    929  f26b
    930  f26b				   pfread
    931  f26b							;x=xvalue, y=yvalue
    932  f26b		       20 59 f2 	      jsr	setuppointers
    933  f26e		       bd d3 f2 	      lda	setbyte,x
    934  f271		       39 a4 00 	      and	playfield,y
    935  f274		       5d d3 f2 	      eor	setbyte,x
    936  f277							; beq readzero
    937  f277							; lda #1
    938  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    940  f278
    941  f278				   pfpixel
    942  f278							;x=xvalue, y=yvalue, a=0,1,2
    943  f278		       20 59 f2 	      jsr	setuppointers
    944  f27b
    945  f27b				  -	      ifconst	bankswitch
    946  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f27b				  -	      beq	pixelon_r	; if "on" go to on
    948  f27b				  -	      lsr
    949  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    951  f27b				  -	      eor	setbyte,x
    952  f27b				  -	      ifconst	superchip
    953  f27b				  -	      sta	playfield-128,y
    954  f27b				  -	      else
    955  f27b				  -	      sta	playfield,y
    956  f27b				  -	      endif
    957  f27b				  -	      RETURN
    958  f27b				  -pixelon_r
    959  f27b				  -	      lda	playfield,y
    960  f27b				  -	      ora	setbyte,x
    961  f27b				  -	      ifconst	superchip
    962  f27b				  -	      sta	playfield-128,y
    963  f27b				  -	      else
    964  f27b				  -	      sta	playfield,y
    965  f27b				  -	      endif
    966  f27b				  -	      RETURN
    967  f27b				  -pixeloff_r
    968  f27b				  -	      lda	setbyte,x
    969  f27b				  -	      eor	#$ff
    970  f27b				  -	      and	playfield,y
    971  f27b				  -	      ifconst	superchip
    972  f27b				  -	      sta	playfield-128,y
    973  f27b				  -	      else
    974  f27b				  -	      sta	playfield,y
    975  f27b				  -	      endif
    976  f27b				  -	      RETURN
    977  f27b				  -
    978  f27b					      else
    979  f27b		       4c ac f2 	      jmp	plotpoint
    980  f27e					      endif
    981  f27e
    982  f27e				   pfhline
    983  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f27e		       20 59 f2 	      jsr	setuppointers
    985  f281		       4c 8b f2 	      jmp	noinc
    986  f284				   keepgoing
    987  f284		       e8		      inx
    988  f285		       8a		      txa
    989  f286		       29 07		      and	#7
    990  f288		       d0 01		      bne	noinc
    991  f28a		       c8		      iny
    992  f28b				   noinc
    993  f28b		       20 ac f2 	      jsr	plotpoint
    994  f28e		       e4 9e		      cpx	temp3
    995  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
    997  f293
    998  f293				   pfvline
    999  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f293		       20 59 f2 	      jsr	setuppointers
   1001  f296		       84 9c		      sty	temp1	; store memory location offset
   1002  f298		       e6 9e		      inc	temp3	; increase final x by 1
   1003  f29a		       a5 9e		      lda	temp3
   1004  f29c		       0a		      asl
   1005  f29d					      if	pfwidth=4
   1006  f29d		       0a		      asl		; multiply by 4
   1007  f29e					      endif		; else multiply by 2
   1008  f29e		       85 9e		      sta	temp3	; store it
   1009  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1011  f2a0							; x should equal original x value
   1012  f2a0				   keepgoingy
   1013  f2a0		       20 ac f2 	      jsr	plotpoint
   1014  f2a3		       c8		      iny
   1015  f2a4		       c8		      iny
   1016  f2a5					      if	pfwidth=4
   1017  f2a5		       c8		      iny
   1018  f2a6		       c8		      iny
   1019  f2a7					      endif
   1020  f2a7		       c4 9e		      cpy	temp3
   1021  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1023  f2ac
   1024  f2ac				   plotpoint
   1025  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f2b0		       4a		      lsr
   1028  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f2b6		       5d d3 f2 	      eor	setbyte,x
   1031  f2b9				  -	      ifconst	superchip
   1032  f2b9				  -	      sta	playfield-128,y
   1033  f2b9					      else
   1034  f2b9		       99 a4 00 	      sta	playfield,y
   1035  f2bc					      endif
   1036  f2bc		       60		      rts
   1037  f2bd				   pixelon
   1038  f2bd		       b9 a4 00 	      lda	playfield,y
   1039  f2c0		       1d d3 f2 	      ora	setbyte,x
   1040  f2c3				  -	      ifconst	superchip
   1041  f2c3				  -	      sta	playfield-128,y
   1042  f2c3					      else
   1043  f2c3		       99 a4 00 	      sta	playfield,y
   1044  f2c6					      endif
   1045  f2c6		       60		      rts
   1046  f2c7				   pixeloff
   1047  f2c7		       bd d3 f2 	      lda	setbyte,x
   1048  f2ca		       49 ff		      eor	#$ff
   1049  f2cc		       39 a4 00 	      and	playfield,y
   1050  f2cf				  -	      ifconst	superchip
   1051  f2cf				  -	      sta	playfield-128,y
   1052  f2cf					      else
   1053  f2cf		       99 a4 00 	      sta	playfield,y
   1054  f2d2					      endif
   1055  f2d2		       60		      rts
   1056  f2d3
   1057  f2d3				   setbyte
   1058  f2d3					      ifnconst	pfcenter
   1059  f2d3		       80		      .byte.b	$80
   1060  f2d4		       40		      .byte.b	$40
   1061  f2d5		       20		      .byte.b	$20
   1062  f2d6		       10		      .byte.b	$10
   1063  f2d7		       08		      .byte.b	$08
   1064  f2d8		       04		      .byte.b	$04
   1065  f2d9		       02		      .byte.b	$02
   1066  f2da		       01		      .byte.b	$01
   1067  f2db					      endif
   1068  f2db		       01		      .byte.b	$01
   1069  f2dc		       02		      .byte.b	$02
   1070  f2dd		       04		      .byte.b	$04
   1071  f2de		       08		      .byte.b	$08
   1072  f2df		       10		      .byte.b	$10
   1073  f2e0		       20		      .byte.b	$20
   1074  f2e1		       40		      .byte.b	$40
   1075  f2e2		       80		      .byte.b	$80
   1076  f2e3		       80		      .byte.b	$80
   1077  f2e4		       40		      .byte.b	$40
   1078  f2e5		       20		      .byte.b	$20
   1079  f2e6		       10		      .byte.b	$10
   1080  f2e7		       08		      .byte.b	$08
   1081  f2e8		       04		      .byte.b	$04
   1082  f2e9		       02		      .byte.b	$02
   1083  f2ea		       01		      .byte.b	$01
   1084  f2eb		       01		      .byte.b	$01
   1085  f2ec		       02		      .byte.b	$02
   1086  f2ed		       04		      .byte.b	$04
   1087  f2ee		       08		      .byte.b	$08
   1088  f2ef		       10		      .byte.b	$10
   1089  f2f0		       20		      .byte.b	$20
   1090  f2f1		       40		      .byte.b	$40
   1091  f2f2		       80		      .byte.b	$80
   1092  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f3		       d0 13		      bne	notleft
   1094  f2f5							;left
   1095  f2f5				  -	      ifconst	pfres
   1096  f2f5				  -	      ldx	#pfres*4
   1097  f2f5					      else
   1098  f2f5		       a2 30		      ldx	#48
   1099  f2f7					      endif
   1100  f2f7				   leftloop
   1101  f2f7		       b5 a3		      lda	playfield-1,x
   1102  f2f9		       4a		      lsr
   1103  f2fa
   1104  f2fa				  -	      ifconst	superchip
   1105  f2fa				  -	      lda	playfield-2,x
   1106  f2fa				  -	      rol
   1107  f2fa				  -	      sta	playfield-130,x
   1108  f2fa				  -	      lda	playfield-3,x
   1109  f2fa				  -	      ror
   1110  f2fa				  -	      sta	playfield-131,x
   1111  f2fa				  -	      lda	playfield-4,x
   1112  f2fa				  -	      rol
   1113  f2fa				  -	      sta	playfield-132,x
   1114  f2fa				  -	      lda	playfield-1,x
   1115  f2fa				  -	      ror
   1116  f2fa				  -	      sta	playfield-129,x
   1117  f2fa					      else
   1118  f2fa		       36 a2		      rol	playfield-2,x
   1119  f2fc		       76 a1		      ror	playfield-3,x
   1120  f2fe		       36 a0		      rol	playfield-4,x
   1121  f300		       76 a3		      ror	playfield-1,x
   1122  f302					      endif
   1123  f302
   1124  f302		       8a		      txa
   1125  f303		       cb 04		      sbx	#4
   1126  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1128  f308
   1129  f308				   notleft
   1130  f308		       4a		      lsr
   1131  f309		       90 13		      bcc	notright
   1132  f30b							;right
   1133  f30b
   1134  f30b				  -	      ifconst	pfres
   1135  f30b				  -	      ldx	#pfres*4
   1136  f30b					      else
   1137  f30b		       a2 30		      ldx	#48
   1138  f30d					      endif
   1139  f30d				   rightloop
   1140  f30d		       b5 a0		      lda	playfield-4,x
   1141  f30f		       4a		      lsr
   1142  f310				  -	      ifconst	superchip
   1143  f310				  -	      lda	playfield-3,x
   1144  f310				  -	      rol
   1145  f310				  -	      sta	playfield-131,x
   1146  f310				  -	      lda	playfield-2,x
   1147  f310				  -	      ror
   1148  f310				  -	      sta	playfield-130,x
   1149  f310				  -	      lda	playfield-1,x
   1150  f310				  -	      rol
   1151  f310				  -	      sta	playfield-129,x
   1152  f310				  -	      lda	playfield-4,x
   1153  f310				  -	      ror
   1154  f310				  -	      sta	playfield-132,x
   1155  f310					      else
   1156  f310		       36 a1		      rol	playfield-3,x
   1157  f312		       76 a2		      ror	playfield-2,x
   1158  f314		       36 a3		      rol	playfield-1,x
   1159  f316		       76 a0		      ror	playfield-4,x
   1160  f318					      endif
   1161  f318		       8a		      txa
   1162  f319		       cb 04		      sbx	#4
   1163  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1165  f31e
   1166  f31e				   notright
   1167  f31e		       4a		      lsr
   1168  f31f		       90 49		      bcc	notup
   1169  f321							;up
   1170  f321		       4a		      lsr
   1171  f322		       90 02		      bcc	onedecup
   1172  f324		       c6 d5		      dec	playfieldpos
   1173  f326				   onedecup
   1174  f326		       c6 d5		      dec	playfieldpos
   1175  f328		       f0 02		      beq	shiftdown
   1176  f32a		       10 3d		      bpl	noshiftdown2
   1177  f32c				   shiftdown
   1178  f32c				  -	      ifconst	pfrowheight
   1179  f32c				  -	      lda	#pfrowheight
   1180  f32c					      else
   1181  f32c					      ifnconst	pfres
   1182  f32c		       a9 08		      lda	#8
   1183  f32e				  -	      else
   1184  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f32e					      endif
   1186  f32e					      endif
   1187  f32e
   1188  f32e		       85 d5		      sta	playfieldpos
   1189  f330		       a5 a7		      lda	playfield+3
   1190  f332		       85 9f		      sta	temp4
   1191  f334		       a5 a6		      lda	playfield+2
   1192  f336		       85 9e		      sta	temp3
   1193  f338		       a5 a5		      lda	playfield+1
   1194  f33a		       85 9d		      sta	temp2
   1195  f33c		       a5 a4		      lda	playfield
   1196  f33e		       85 9c		      sta	temp1
   1197  f340		       a2 00		      ldx	#0
   1198  f342				   up2
   1199  f342		       b5 a8		      lda	playfield+4,x
   1200  f344				  -	      ifconst	superchip
   1201  f344				  -	      sta	playfield-128,x
   1202  f344				  -	      lda	playfield+5,x
   1203  f344				  -	      sta	playfield-127,x
   1204  f344				  -	      lda	playfield+6,x
   1205  f344				  -	      sta	playfield-126,x
   1206  f344				  -	      lda	playfield+7,x
   1207  f344				  -	      sta	playfield-125,x
   1208  f344					      else
   1209  f344		       95 a4		      sta	playfield,x
   1210  f346		       b5 a9		      lda	playfield+5,x
   1211  f348		       95 a5		      sta	playfield+1,x
   1212  f34a		       b5 aa		      lda	playfield+6,x
   1213  f34c		       95 a6		      sta	playfield+2,x
   1214  f34e		       b5 ab		      lda	playfield+7,x
   1215  f350		       95 a7		      sta	playfield+3,x
   1216  f352					      endif
   1217  f352		       8a		      txa
   1218  f353		       cb fc		      sbx	#252
   1219  f355				  -	      ifconst	pfres
   1220  f355				  -	      cpx	#(pfres-1)*4
   1221  f355					      else
   1222  f355		       e0 2c		      cpx	#44
   1223  f357					      endif
   1224  f357		       d0 e9		      bne	up2
   1225  f359
   1226  f359		       a5 9f		      lda	temp4
   1227  f35b
   1228  f35b				  -	      ifconst	superchip
   1229  f35b				  -	      ifconst	pfres
   1230  f35b				  -	      sta	playfield+pfres*4-129
   1231  f35b				  -	      lda	temp3
   1232  f35b				  -	      sta	playfield+pfres*4-130
   1233  f35b				  -	      lda	temp2
   1234  f35b				  -	      sta	playfield+pfres*4-131
   1235  f35b				  -	      lda	temp1
   1236  f35b				  -	      sta	playfield+pfres*4-132
   1237  f35b				  -	      else
   1238  f35b				  -	      sta	playfield+47-128
   1239  f35b				  -	      lda	temp3
   1240  f35b				  -	      sta	playfield+46-128
   1241  f35b				  -	      lda	temp2
   1242  f35b				  -	      sta	playfield+45-128
   1243  f35b				  -	      lda	temp1
   1244  f35b				  -	      sta	playfield+44-128
   1245  f35b				  -	      endif
   1246  f35b					      else
   1247  f35b				  -	      ifconst	pfres
   1248  f35b				  -	      sta	playfield+pfres*4-1
   1249  f35b				  -	      lda	temp3
   1250  f35b				  -	      sta	playfield+pfres*4-2
   1251  f35b				  -	      lda	temp2
   1252  f35b				  -	      sta	playfield+pfres*4-3
   1253  f35b				  -	      lda	temp1
   1254  f35b				  -	      sta	playfield+pfres*4-4
   1255  f35b					      else
   1256  f35b		       85 d3		      sta	playfield+47
   1257  f35d		       a5 9e		      lda	temp3
   1258  f35f		       85 d2		      sta	playfield+46
   1259  f361		       a5 9d		      lda	temp2
   1260  f363		       85 d1		      sta	playfield+45
   1261  f365		       a5 9c		      lda	temp1
   1262  f367		       85 d0		      sta	playfield+44
   1263  f369					      endif
   1264  f369					      endif
   1265  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1267  f36a
   1268  f36a
   1269  f36a				   notup
   1270  f36a							;down
   1271  f36a		       4a		      lsr
   1272  f36b		       b0 02		      bcs	oneincup
   1273  f36d		       e6 d5		      inc	playfieldpos
   1274  f36f				   oneincup
   1275  f36f		       e6 d5		      inc	playfieldpos
   1276  f371		       a5 d5		      lda	playfieldpos
   1277  f373
   1278  f373				  -	      ifconst	pfrowheight
   1279  f373				  -	      cmp	#pfrowheight+1
   1280  f373					      else
   1281  f373					      ifnconst	pfres
   1282  f373		       c9 09		      cmp	#9
   1283  f375				  -	      else
   1284  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f375					      endif
   1286  f375					      endif
   1287  f375
   1288  f375		       90 3b		      bcc	noshiftdown
   1289  f377		       a9 01		      lda	#1
   1290  f379		       85 d5		      sta	playfieldpos
   1291  f37b
   1292  f37b				  -	      ifconst	pfres
   1293  f37b				  -	      lda	playfield+pfres*4-1
   1294  f37b				  -	      sta	temp4
   1295  f37b				  -	      lda	playfield+pfres*4-2
   1296  f37b				  -	      sta	temp3
   1297  f37b				  -	      lda	playfield+pfres*4-3
   1298  f37b				  -	      sta	temp2
   1299  f37b				  -	      lda	playfield+pfres*4-4
   1300  f37b					      else
   1301  f37b		       a5 d3		      lda	playfield+47
   1302  f37d		       85 9f		      sta	temp4
   1303  f37f		       a5 d2		      lda	playfield+46
   1304  f381		       85 9e		      sta	temp3
   1305  f383		       a5 d1		      lda	playfield+45
   1306  f385		       85 9d		      sta	temp2
   1307  f387		       a5 d0		      lda	playfield+44
   1308  f389					      endif
   1309  f389
   1310  f389		       85 9c		      sta	temp1
   1311  f38b
   1312  f38b				  -	      ifconst	pfres
   1313  f38b				  -	      ldx	#(pfres-1)*4
   1314  f38b					      else
   1315  f38b		       a2 2c		      ldx	#44
   1316  f38d					      endif
   1317  f38d				   down2
   1318  f38d		       b5 a3		      lda	playfield-1,x
   1319  f38f				  -	      ifconst	superchip
   1320  f38f				  -	      sta	playfield-125,x
   1321  f38f				  -	      lda	playfield-2,x
   1322  f38f				  -	      sta	playfield-126,x
   1323  f38f				  -	      lda	playfield-3,x
   1324  f38f				  -	      sta	playfield-127,x
   1325  f38f				  -	      lda	playfield-4,x
   1326  f38f				  -	      sta	playfield-128,x
   1327  f38f					      else
   1328  f38f		       95 a7		      sta	playfield+3,x
   1329  f391		       b5 a2		      lda	playfield-2,x
   1330  f393		       95 a6		      sta	playfield+2,x
   1331  f395		       b5 a1		      lda	playfield-3,x
   1332  f397		       95 a5		      sta	playfield+1,x
   1333  f399		       b5 a0		      lda	playfield-4,x
   1334  f39b		       95 a4		      sta	playfield,x
   1335  f39d					      endif
   1336  f39d		       8a		      txa
   1337  f39e		       cb 04		      sbx	#4
   1338  f3a0		       d0 eb		      bne	down2
   1339  f3a2
   1340  f3a2		       a5 9f		      lda	temp4
   1341  f3a4				  -	      ifconst	superchip
   1342  f3a4				  -	      sta	playfield-125
   1343  f3a4				  -	      lda	temp3
   1344  f3a4				  -	      sta	playfield-126
   1345  f3a4				  -	      lda	temp2
   1346  f3a4				  -	      sta	playfield-127
   1347  f3a4				  -	      lda	temp1
   1348  f3a4				  -	      sta	playfield-128
   1349  f3a4					      else
   1350  f3a4		       85 a7		      sta	playfield+3
   1351  f3a6		       a5 9e		      lda	temp3
   1352  f3a8		       85 a6		      sta	playfield+2
   1353  f3aa		       a5 9d		      lda	temp2
   1354  f3ac		       85 a5		      sta	playfield+1
   1355  f3ae		       a5 9c		      lda	temp1
   1356  f3b0		       85 a4		      sta	playfield
   1357  f3b2					      endif
   1358  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1360  f3b3							;standard routines needed for pretty much all games
   1361  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f3b3							; repositioning code and score pointer setup moved to overscan
   1363  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1364  f3b3
   1365  f3b3				   randomize
   1366  f3b3		       a5 a2		      lda	rand
   1367  f3b5		       4a		      lsr
   1368  f3b6				  -	      ifconst	rand16
   1369  f3b6				  -	      rol	rand16
   1370  f3b6					      endif
   1371  f3b6		       90 02		      bcc	noeor
   1372  f3b8		       49 b4		      eor	#$B4
   1373  f3ba				   noeor
   1374  f3ba		       85 a2		      sta	rand
   1375  f3bc				  -	      ifconst	rand16
   1376  f3bc				  -	      eor	rand16
   1377  f3bc					      endif
      0  f3bc					      RETURN
      1  f3bc					      ifnconst	bankswitch
      2  f3bc		       60		      rts
      3  f3bd				  -	      else
      4  f3bd				  -	      jmp	BS_return
      5  f3bd					      endif
   1379  f3bd				   drawscreen
   1380  f3bd				  -	      ifconst	debugscore
   1381  f3bd				  -	      ldx	#14
   1382  f3bd				  -	      lda	INTIM	; display # cycles left in the score
   1383  f3bd				  -
   1384  f3bd				  -	      ifconst	mincycles
   1385  f3bd				  -	      lda	mincycles
   1386  f3bd				  -	      cmp	INTIM
   1387  f3bd				  -	      lda	mincycles
   1388  f3bd				  -	      bcc	nochange
   1389  f3bd				  -	      lda	INTIM
   1390  f3bd				  -	      sta	mincycles
   1391  f3bd				  -nochange
   1392  f3bd				  -	      endif
   1393  f3bd				  -
   1394  f3bd				  -			; cmp #$2B
   1395  f3bd				  -			; bcs no_cycles_left
   1396  f3bd				  -	      bmi	cycles_left
   1397  f3bd				  -	      ldx	#64
   1398  f3bd				  -	      eor	#$ff	;make negative
   1399  f3bd				  -cycles_left
   1400  f3bd				  -	      stx	scorecolor
   1401  f3bd				  -	      and	#$7f	; clear sign bit
   1402  f3bd				  -	      tax
   1403  f3bd				  -	      lda	scorebcd,x
   1404  f3bd				  -	      sta	score+2
   1405  f3bd				  -	      lda	scorebcd1,x
   1406  f3bd				  -	      sta	score+1
   1407  f3bd				  -	      jmp	done_debugscore
   1408  f3bd				  -scorebcd
   1409  f3bd				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f3bd				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f3bd				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f3bd				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f3bd				  -scorebcd1
   1414  f3bd				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f3bd				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f3bd				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f3bd				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f3bd				  -done_debugscore
   1419  f3bd					      endif
   1420  f3bd
   1421  f3bd				  -	      ifconst	debugcycles
   1422  f3bd				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f3bd				  -			; cmp #$2B
   1424  f3bd				  -			; BCC overscan
   1425  f3bd				  -	      bmi	overscan
   1426  f3bd				  -	      sta	COLUBK
   1427  f3bd				  -	      bcs	doneoverscan
   1428  f3bd					      endif
   1429  f3bd
   1430  f3bd				   overscan
   1431  f3bd				  -	      ifconst	interlaced
   1432  f3bd				  -	      PHP
   1433  f3bd				  -	      PLA
   1434  f3bd				  -	      EOR	#4	; flip interrupt bit
   1435  f3bd				  -	      PHA
   1436  f3bd				  -	      PLP
   1437  f3bd				  -	      AND	#4	; isolate the interrupt bit
   1438  f3bd				  -	      TAX		; save it for later
   1439  f3bd					      endif
   1440  f3bd
   1441  f3bd				   overscanloop
   1442  f3bd		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f3c0		       30 fb		      bmi	overscanloop
   1444  f3c2				   doneoverscan
   1445  f3c2
   1446  f3c2							;do VSYNC
   1447  f3c2
   1448  f3c2				  -	      ifconst	interlaced
   1449  f3c2				  -	      CPX	#4
   1450  f3c2				  -	      BNE	oddframevsync
   1451  f3c2					      endif
   1452  f3c2
   1453  f3c2		       a9 02		      lda	#2
   1454  f3c4		       85 02		      sta	WSYNC
   1455  f3c6		       85 00		      sta	VSYNC
   1456  f3c8		       85 02		      STA	WSYNC
   1457  f3ca		       85 02		      STA	WSYNC
   1458  f3cc		       4a		      lsr
   1459  f3cd		       85 02		      STA	WSYNC
   1460  f3cf		       85 00		      STA	VSYNC
   1461  f3d1		       85 01		      sta	VBLANK
   1462  f3d3					      ifnconst	overscan_time
   1463  f3d3		       a9 a5		      lda	#37+128
   1464  f3d5				  -	      else
   1465  f3d5				  -	      lda	#overscan_time+128
   1466  f3d5					      endif
   1467  f3d5		       8d 96 02 	      sta	TIM64T
   1468  f3d8
   1469  f3d8				  -	      ifconst	interlaced
   1470  f3d8				  -	      jmp	postsync
   1471  f3d8				  -
   1472  f3d8				  -oddframevsync
   1473  f3d8				  -	      sta	WSYNC
   1474  f3d8				  -
   1475  f3d8				  -	      LDA	($80,X)	; 11 waste
   1476  f3d8				  -	      LDA	($80,X)	; 11 waste
   1477  f3d8				  -	      LDA	($80,X)	; 11 waste
   1478  f3d8				  -
   1479  f3d8				  -	      lda	#2
   1480  f3d8				  -	      sta	VSYNC
   1481  f3d8				  -	      sta	WSYNC
   1482  f3d8				  -	      sta	WSYNC
   1483  f3d8				  -	      sta	WSYNC
   1484  f3d8				  -
   1485  f3d8				  -	      LDA	($80,X)	; 11 waste
   1486  f3d8				  -	      LDA	($80,X)	; 11 waste
   1487  f3d8				  -	      LDA	($80,X)	; 11 waste
   1488  f3d8				  -
   1489  f3d8				  -	      lda	#0
   1490  f3d8				  -	      sta	VSYNC
   1491  f3d8				  -	      sta	VBLANK
   1492  f3d8				  -	      ifnconst	overscan_time
   1493  f3d8				  -	      lda	#37+128
   1494  f3d8				  -	      else
   1495  f3d8				  -	      lda	#overscan_time+128
   1496  f3d8				  -	      endif
   1497  f3d8				  -	      sta	TIM64T
   1498  f3d8				  -
   1499  f3d8				  -postsync
   1500  f3d8					      endif
   1501  f3d8
   1502  f3d8				  -	      ifconst	legacy
   1503  f3d8				  -	      if	legacy < 100
   1504  f3d8				  -	      ldx	#4
   1505  f3d8				  -adjustloop
   1506  f3d8				  -	      lda	player0x,x
   1507  f3d8				  -	      sec
   1508  f3d8				  -	      sbc	#14	;?
   1509  f3d8				  -	      sta	player0x,x
   1510  f3d8				  -	      dex
   1511  f3d8				  -	      bpl	adjustloop
   1512  f3d8				  -	      endif
   1513  f3d8					      endif
   1514  f3d8				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f3d8				  -	      repeat	($fa-(<*))
   1516  f3d8				  -	      nop
   1517  f3d8				  -	      repend
   1518  f3d8					      endif
   1519  f3d8		       85 02		      sta	WSYNC
   1520  f3da		       a2 04		      ldx	#4
      0  f3dc					      SLEEP	3
      1  f3dc				   .CYCLES    SET	3
      2  f3dc
      3  f3dc				  -	      IF	.CYCLES < 2
      4  f3dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3dc				  -	      ERR
      6  f3dc					      ENDIF
      7  f3dc
      8  f3dc					      IF	.CYCLES & 1
      9  f3dc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3dc		       04 00		      nop	0
     11  f3de				  -	      ELSE
     12  f3de				  -	      bit	VSYNC
     13  f3de					      ENDIF
     14  f3de				   .CYCLES    SET	.CYCLES - 3
     15  f3de					      ENDIF
     16  f3de
     17  f3de				  -	      REPEAT	.CYCLES / 2
     18  f3de				  -	      nop
     19  f3de					      REPEND
   1522  f3de				   HorPosLoop		; 5
   1523  f3de		       b5 80		      lda	player0x,X	;+4 9
   1524  f3e0		       38		      sec		;+2 11
   1525  f3e1				   DivideLoop
   1526  f3e1		       e9 0f		      sbc	#15
   1527  f3e3		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f3e5		       95 9c		      sta	temp1,X	;+4 19
   1529  f3e7		       95 10		      sta	RESP0,X	;+4 23
   1530  f3e9		       85 02		      sta	WSYNC
   1531  f3eb		       ca		      dex
   1532  f3ec		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f3ee							; 4
   1534  f3ee
   1535  f3ee		       a2 04		      ldx	#4
   1536  f3f0		       b4 9c		      ldy	temp1,X
   1537  f3f2		       b9 4e f3 	      lda	repostable-256,Y
   1538  f3f5		       95 20		      sta	HMP0,X	;+14 18
   1539  f3f7
   1540  f3f7		       ca		      dex
   1541  f3f8		       b4 9c		      ldy	temp1,X
   1542  f3fa		       b9 4e f3 	      lda	repostable-256,Y
   1543  f3fd		       95 20		      sta	HMP0,X	;+14 32
   1544  f3ff
   1545  f3ff		       ca		      dex
   1546  f400		       b4 9c		      ldy	temp1,X
   1547  f402		       b9 4e f3 	      lda	repostable-256,Y
   1548  f405		       95 20		      sta	HMP0,X	;+14 46
   1549  f407
   1550  f407		       ca		      dex
   1551  f408		       b4 9c		      ldy	temp1,X
   1552  f40a		       b9 4e f3 	      lda	repostable-256,Y
   1553  f40d		       95 20		      sta	HMP0,X	;+14 60
   1554  f40f
   1555  f40f		       ca		      dex
   1556  f410		       b4 9c		      ldy	temp1,X
   1557  f412		       b9 4e f3 	      lda	repostable-256,Y
   1558  f415		       95 20		      sta	HMP0,X	;+14 74
   1559  f417
   1560  f417		       85 02		      sta	WSYNC
   1561  f419
   1562  f419		       85 2a		      sta	HMOVE	;+3 3
   1563  f41b
   1564  f41b
   1565  f41b				  -	      ifconst	legacy
   1566  f41b				  -	      if	legacy < 100
   1567  f41b				  -	      ldx	#4
   1568  f41b				  -adjustloop2
   1569  f41b				  -	      lda	player0x,x
   1570  f41b				  -	      clc
   1571  f41b				  -	      adc	#14	;?
   1572  f41b				  -	      sta	player0x,x
   1573  f41b				  -	      dex
   1574  f41b				  -	      bpl	adjustloop2
   1575  f41b				  -	      endif
   1576  f41b					      endif
   1577  f41b
   1578  f41b
   1579  f41b
   1580  f41b
   1581  f41b							;set score pointers
   1582  f41b		       a7 95		      lax	score+2
   1583  f41d		       20 4e f4 	      jsr	scorepointerset
   1584  f420		       84 9b		      sty	scorepointers+5
   1585  f422		       86 98		      stx	scorepointers+2
   1586  f424		       a7 94		      lax	score+1
   1587  f426		       20 4e f4 	      jsr	scorepointerset
   1588  f429		       84 9a		      sty	scorepointers+4
   1589  f42b		       86 97		      stx	scorepointers+1
   1590  f42d		       a7 93		      lax	score
   1591  f42f		       20 4e f4 	      jsr	scorepointerset
   1592  f432		       84 99		      sty	scorepointers+3
   1593  f434		       86 96		      stx	scorepointers
   1594  f436
   1595  f436				   vblk
   1596  f436							; run possible vblank bB code
   1597  f436				  -	      ifconst	vblank_bB_code
   1598  f436				  -	      jsr	vblank_bB_code
   1599  f436					      endif
   1600  f436				   vblk2
   1601  f436		       ad 84 02 	      LDA	INTIM
   1602  f439		       30 fb		      bmi	vblk2
   1603  f43b		       4c 34 f0 	      jmp	kernel
   1604  f43e
   1605  f43e
   1606  f43e		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f447		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f44e				   repostable
   1609  f44e
   1610  f44e				   scorepointerset
   1611  f44e		       29 0f		      and	#$0F
   1612  f450		       0a		      asl
   1613  f451		       0a		      asl
   1614  f452		       0a		      asl
   1615  f453		       69 9c		      adc	#<scoretable
   1616  f455		       a8		      tay
   1617  f456		       8a		      txa
   1618  f457							; and #$F0
   1619  f457							; lsr
   1620  f457		       4b f0		      asr	#$F0
   1621  f459		       69 9c		      adc	#<scoretable
   1622  f45b		       aa		      tax
   1623  f45c		       60		      rts
   1624  f45d							; y and a contain multiplicands, result in a
   1625  f45d
   1626  f45d				   mul8
   1627  f45d		       84 9c		      sty	temp1
   1628  f45f		       85 9d		      sta	temp2
   1629  f461		       a9 00		      lda	#0
   1630  f463				   reptmul8
   1631  f463		       46 9d		      lsr	temp2
   1632  f465		       90 03		      bcc	skipmul8
   1633  f467		       18		      clc
   1634  f468		       65 9c		      adc	temp1
   1635  f46a							;bcs donemul8 might save cycles?
   1636  f46a				   skipmul8
   1637  f46a							;beq donemul8 might save cycles?
   1638  f46a		       06 9c		      asl	temp1
   1639  f46c		       d0 f5		      bne	reptmul8
   1640  f46e				   donemul8
      0  f46e					      RETURN
      1  f46e					      ifnconst	bankswitch
      2  f46e		       60		      rts
      3  f46f				  -	      else
      4  f46f				  -	      jmp	BS_return
      5  f46f					      endif
   1642  f46f
   1643  f46f				   div8
   1644  f46f							; a=numerator y=denominator, result in a
   1645  f46f		       c0 02		      cpy	#2
   1646  f471		       90 0a		      bcc	div8end+1	;div by 0 = bad, div by 1=no calc needed, so bail out
   1647  f473		       84 9c		      sty	temp1
   1648  f475		       a0 ff		      ldy	#$ff
   1649  f477				   div8loop
   1650  f477		       e5 9c		      sbc	temp1
   1651  f479		       c8		      iny
   1652  f47a		       b0 fb		      bcs	div8loop
   1653  f47c				   div8end
   1654  f47c		       98		      tya
   1655  f47d							; result in a
      0  f47d					      RETURN
      1  f47d					      ifnconst	bankswitch
      2  f47d		       60		      rts
      3  f47e				  -	      else
      4  f47e				  -	      jmp	BS_return
      5  f47e					      endif
   1657  f47e				   game
   1658  f47e				   .L00 		;  include div_mul.asm
   1659  f47e
   1660  f47e				   .
   1661  f47e							;
   1662  f47e
   1663  f47e				   .L01 		;  rem Support Black and White Monitors and hide score based on new color setting.
   1664  f47e
   1665  f47e				   .L02 		;  if switchbw then COLUBK  =	$00 : COLUPF  =  $0E else COLUBK =  $0E : COLUPF =  $80
   1666  f47e
   1667  f47e		       a9 08		      lda	#8
   1668  f480		       2c 82 02 	      bit	SWCHB
   1669  f483		       d0 0b		      BNE	.skipL02
   1670  f485				   .condpart0
   1671  f485		       a9 00		      LDA	#$00
   1672  f487		       85 09		      STA	COLUBK
   1673  f489		       a9 0e		      LDA	#$0E
   1674  f48b		       85 08		      STA	COLUPF
   1675  f48d		       4c 98 f4 	      jmp	.skipelse0
   1676  f490				   .skipL02
   1677  f490		       a9 0e		      LDA	#$0E
   1678  f492		       85 09		      STA	COLUBK
   1679  f494		       a9 80		      LDA	#$80
   1680  f496		       85 08		      STA	COLUPF
   1681  f498				   .skipelse0
   1682  f498				   .L03 		;  if switchbw then scorecolor  =  $00 else scorecolor  =  $0E
   1683  f498
   1684  f498		       a9 08		      lda	#8
   1685  f49a		       2c 82 02 	      bit	SWCHB
   1686  f49d		       d0 07		      BNE	.skipL03
   1687  f49f				   .condpart1
   1688  f49f		       a9 00		      LDA	#$00
   1689  f4a1		       85 a3		      STA	scorecolor
   1690  f4a3		       4c aa f4 	      jmp	.skipelse1
   1691  f4a6				   .skipL03
   1692  f4a6		       a9 0e		      LDA	#$0E
   1693  f4a8		       85 a3		      STA	scorecolor
   1694  f4aa				   .skipelse1
   1695  f4aa				   .
   1696  f4aa							;
   1697  f4aa
   1698  f4aa				   .
   1699  f4aa							;
   1700  f4aa
   1701  f4aa				   .
   1702  f4aa							;
   1703  f4aa
   1704  f4aa				   .L04 		;  dim timer  =  c
   1705  f4aa
   1706  f4aa				   .
   1707  f4aa							;
   1708  f4aa
   1709  f4aa				   .
   1710  f4aa							;
   1711  f4aa
   1712  f4aa				   .
   1713  f4aa							;
   1714  f4aa
   1715  f4aa				   .introloop
   1716  f4aa							; introloop
   1717  f4aa
   1718  f4aa				   .L05 		;  drawscreen
   1719  f4aa
   1720  f4aa		       20 bd f3 	      jsr	drawscreen
   1721  f4ad				   .L06 		;  playfield:
   1722  f4ad
   1723  f4ad				  -	      ifconst	pfres
   1724  f4ad				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1725  f4ad					      else
   1726  f4ad		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1727  f4af					      endif
   1728  f4af		       4c de f4 	      jmp	pflabel0
   1729  f4b2				   PF_data0
   1730  f4b2		       00 00		      .byte.b	%00000000, %00000000
   1731  f4b4					      if	(pfwidth>2)
   1732  f4b4		       00 00		      .byte.b	%00000000, %00000000
   1733  f4b6					      endif
   1734  f4b6		       ff ff		      .byte.b	%11111111, %11111111
   1735  f4b8					      if	(pfwidth>2)
   1736  f4b8		       ff ff		      .byte.b	%11111111, %11111111
   1737  f4ba					      endif
   1738  f4ba		       00 00		      .byte.b	%00000000, %00000000
   1739  f4bc					      if	(pfwidth>2)
   1740  f4bc		       00 00		      .byte.b	%00000000, %00000000
   1741  f4be					      endif
   1742  f4be		       d1 bb		      .byte.b	%11010001, %10111011
   1743  f4c0					      if	(pfwidth>2)
   1744  f4c0		       17 ce		      .byte.b	%00010111, %11001110
   1745  f4c2					      endif
   1746  f4c2		       11 a8		      .byte.b	%00010001, %10101000
   1747  f4c4					      if	(pfwidth>2)
   1748  f4c4		       94 0a		      .byte.b	%10010100, %00001010
   1749  f4c6					      endif
   1750  f4c6		       d1 b9		      .byte.b	%11010001, %10111001
   1751  f4c8					      if	(pfwidth>2)
   1752  f4c8		       56 ce		      .byte.b	%01010110, %11001110
   1753  f4ca					      endif
   1754  f4ca		       11 98		      .byte.b	%00010001, %10011000
   1755  f4cc					      if	(pfwidth>2)
   1756  f4cc		       34 06		      .byte.b	%00110100, %00000110
   1757  f4ce					      endif
   1758  f4ce		       dd ab		      .byte.b	%11011101, %10101011
   1759  f4d0					      if	(pfwidth>2)
   1760  f4d0		       17 ca		      .byte.b	%00010111, %11001010
   1761  f4d2					      endif
   1762  f4d2		       00 00		      .byte.b	%00000000, %00000000
   1763  f4d4					      if	(pfwidth>2)
   1764  f4d4		       00 00		      .byte.b	%00000000, %00000000
   1765  f4d6					      endif
   1766  f4d6		       ff ff		      .byte.b	%11111111, %11111111
   1767  f4d8					      if	(pfwidth>2)
   1768  f4d8		       ff ff		      .byte.b	%11111111, %11111111
   1769  f4da					      endif
   1770  f4da		       00 00		      .byte.b	%00000000, %00000000
   1771  f4dc					      if	(pfwidth>2)
   1772  f4dc		       00 00		      .byte.b	%00000000, %00000000
   1773  f4de					      endif
   1774  f4de				   pflabel0
   1775  f4de		       bd b2 f4 	      lda	PF_data0,x
   1776  f4e1		       95 a4		      sta	playfield,x
   1777  f4e3		       ca		      dex
   1778  f4e4		       10 f8		      bpl	pflabel0
   1779  f4e6				   .L07 		;  timer  =  timer  +	1
   1780  f4e6
   1781  f4e6		       e6 d8		      INC	timer
   1782  f4e8				   .L08 		;  if timer  =  128 then goto introloop2
   1783  f4e8
   1784  f4e8		       a5 d8		      LDA	timer
   1785  f4ea		       c9 80		      CMP	#128
   1786  f4ec		       d0 03		      BNE	.skipL08
   1787  f4ee				   .condpart2
   1788  f4ee		       4c f4 f4 	      jmp	.introloop2
   1789  f4f1
   1790  f4f1				   .skipL08
   1791  f4f1				   .L09 		;  goto introloop
   1792  f4f1
   1793  f4f1		       4c aa f4 	      jmp	.introloop
   1794  f4f4
   1795  f4f4				   .
   1796  f4f4							;
   1797  f4f4
   1798  f4f4				   .introloop2
   1799  f4f4							; introloop2
   1800  f4f4
   1801  f4f4				   .L010		;  timer  =  0
   1802  f4f4
   1803  f4f4		       a9 00		      LDA	#0
   1804  f4f6		       85 d8		      STA	timer
   1805  f4f8				   .L011		;  drawscreen
   1806  f4f8
   1807  f4f8		       20 bd f3 	      jsr	drawscreen
   1808  f4fb				   .L012		;  playfield:
   1809  f4fb
   1810  f4fb				  -	      ifconst	pfres
   1811  f4fb				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1812  f4fb					      else
   1813  f4fb		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1814  f4fd					      endif
   1815  f4fd		       4c 2c f5 	      jmp	pflabel1
   1816  f500				   PF_data1
   1817  f500		       00 00		      .byte.b	%00000000, %00000000
   1818  f502					      if	(pfwidth>2)
   1819  f502		       00 00		      .byte.b	%00000000, %00000000
   1820  f504					      endif
   1821  f504		       00 00		      .byte.b	%00000000, %00000000
   1822  f506					      if	(pfwidth>2)
   1823  f506		       00 00		      .byte.b	%00000000, %00000000
   1824  f508					      endif
   1825  f508		       6c db		      .byte.b	%01101100, %11011011
   1826  f50a					      if	(pfwidth>2)
   1827  f50a		       11 a4		      .byte.b	%00010001, %10100100
   1828  f50c					      endif
   1829  f50c		       4a 49		      .byte.b	%01001010, %01001001
   1830  f50e					      if	(pfwidth>2)
   1831  f50e		       91 aa		      .byte.b	%10010001, %10101010
   1832  f510					      endif
   1833  f510		       6c 5b		      .byte.b	%01101100, %01011011
   1834  f512					      if	(pfwidth>2)
   1835  f512		       91 4e		      .byte.b	%10010001, %01001110
   1836  f514					      endif
   1837  f514		       28 49		      .byte.b	%00101000, %01001001
   1838  f516					      if	(pfwidth>2)
   1839  f516		       95 4a		      .byte.b	%10010101, %01001010
   1840  f518					      endif
   1841  f518		       68 db		      .byte.b	%01101000, %11011011
   1842  f51a					      if	(pfwidth>2)
   1843  f51a		       0a 4a		      .byte.b	%00001010, %01001010
   1844  f51c					      endif
   1845  f51c		       00 00		      .byte.b	%00000000, %00000000
   1846  f51e					      if	(pfwidth>2)
   1847  f51e		       00 00		      .byte.b	%00000000, %00000000
   1848  f520					      endif
   1849  f520		       cc 33		      .byte.b	%11001100, %00110011
   1850  f522					      if	(pfwidth>2)
   1851  f522		       cc 33		      .byte.b	%11001100, %00110011
   1852  f524					      endif
   1853  f524		       33 cc		      .byte.b	%00110011, %11001100
   1854  f526					      if	(pfwidth>2)
   1855  f526		       33 cc		      .byte.b	%00110011, %11001100
   1856  f528					      endif
   1857  f528		       00 00		      .byte.b	%00000000, %00000000
   1858  f52a					      if	(pfwidth>2)
   1859  f52a		       00 00		      .byte.b	%00000000, %00000000
   1860  f52c					      endif
   1861  f52c				   pflabel1
   1862  f52c		       bd 00 f5 	      lda	PF_data1,x
   1863  f52f		       95 a4		      sta	playfield,x
   1864  f531		       ca		      dex
   1865  f532		       10 f8		      bpl	pflabel1
   1866  f534				   .L013		;  if switchreset  ||	joy0fire then goto gameinit
   1867  f534
   1868  f534		       a9 01		      lda	#1
   1869  f536		       2c 82 02 	      bit	SWCHB
   1870  f539		       d0 03		      BNE	.skipL013
   1871  f53b				   .condpart3
   1872  f53b		       4c 42 f5 	      jmp	.condpart4
   1873  f53e				   .skipL013
   1874  f53e		       24 0c		      bit	INPT4
   1875  f540		       30 03		      BMI	.skip0OR
   1876  f542				   .condpart4
   1877  f542		       4c 48 f5 	      jmp	.gameinit
   1878  f545
   1879  f545				   .skip0OR
   1880  f545				   .L014		;  goto introloop2
   1881  f545
   1882  f545		       4c f4 f4 	      jmp	.introloop2
   1883  f548
   1884  f548				   .
   1885  f548							;
   1886  f548
   1887  f548				   .
   1888  f548							;
   1889  f548
   1890  f548				   .
   1891  f548							;
   1892  f548
   1893  f548				   .
   1894  f548							;
   1895  f548
   1896  f548				   .
   1897  f548							;
   1898  f548
   1899  f548				   .
   1900  f548							;
   1901  f548
   1902  f548				   .
   1903  f548							;
   1904  f548
   1905  f548				   .gameinit
   1906  f548							; gameinit
   1907  f548
   1908  f548				   .L015		;  rem Detect B&W Switch and change colors of background, playfield, and score color respectively.
   1909  f548
   1910  f548				   .L016		;  if switchbw then COLUBK  =	$00 : COLUPF  =  $0E else COLUBK =  $05 : COLUPF =  $1E
   1911  f548
   1912  f548		       a9 08		      lda	#8
   1913  f54a		       2c 82 02 	      bit	SWCHB
   1914  f54d		       d0 0b		      BNE	.skipL016
   1915  f54f				   .condpart5
   1916  f54f		       a9 00		      LDA	#$00
   1917  f551		       85 09		      STA	COLUBK
   1918  f553		       a9 0e		      LDA	#$0E
   1919  f555		       85 08		      STA	COLUPF
   1920  f557		       4c 62 f5 	      jmp	.skipelse2
   1921  f55a				   .skipL016
   1922  f55a		       a9 05		      LDA	#$05
   1923  f55c		       85 09		      STA	COLUBK
   1924  f55e		       a9 1e		      LDA	#$1E
   1925  f560		       85 08		      STA	COLUPF
   1926  f562				   .skipelse2
   1927  f562				   .L017		;  if switchbw then scorecolor  =  $0E else scorecolor  =  $40
   1928  f562
   1929  f562		       a9 08		      lda	#8
   1930  f564		       2c 82 02 	      bit	SWCHB
   1931  f567		       d0 07		      BNE	.skipL017
   1932  f569				   .condpart6
   1933  f569		       a9 0e		      LDA	#$0E
   1934  f56b		       85 a3		      STA	scorecolor
   1935  f56d		       4c 74 f5 	      jmp	.skipelse3
   1936  f570				   .skipL017
   1937  f570		       a9 40		      LDA	#$40
   1938  f572		       85 a3		      STA	scorecolor
   1939  f574				   .skipelse3
   1940  f574				   .
   1941  f574							;
   1942  f574
   1943  f574				   .
   1944  f574							;
   1945  f574
   1946  f574				   .L018		;  AUDV0  =  0
   1947  f574
   1948  f574		       a9 00		      LDA	#0
   1949  f576		       85 19		      STA	AUDV0
   1950  f578				   .L019		;  dim mph  =	a
   1951  f578
   1952  f578				   .L020		;  dim badguymph  =  b
   1953  f578
   1954  f578				   .L021		;  mph  =  0
   1955  f578
   1956  f578		       a9 00		      LDA	#0
   1957  f57a		       85 d6		      STA	mph
   1958  f57c				   .L022		;  badguymph  =  0
   1959  f57c
   1960  f57c		       a9 00		      LDA	#0
   1961  f57e		       85 d7		      STA	badguymph
   1962  f580				   .L023		;  player0x  =  95
   1963  f580
   1964  f580		       a9 5f		      LDA	#95
   1965  f582		       85 80		      STA	player0x
   1966  f584				   .L024		;  player0y  =  70
   1967  f584
   1968  f584		       a9 46		      LDA	#70
   1969  f586		       85 85		      STA	player0y
   1970  f588				   .L025		;  player1x  =  50
   1971  f588
   1972  f588		       a9 32		      LDA	#50
   1973  f58a		       85 81		      STA	player1x
   1974  f58c				   .L026		;  player1y  =  20
   1975  f58c
   1976  f58c		       a9 14		      LDA	#20
   1977  f58e		       85 86		      STA	player1y
   1978  f590				   .L027		;  score  =  0
   1979  f590
   1980  f590		       a9 00		      LDA	#$00
   1981  f592		       85 95		      STA	score+2
   1982  f594		       a9 00		      LDA	#$00
   1983  f596		       85 94		      STA	score+1
   1984  f598		       a9 00		      LDA	#$00
   1985  f59a		       85 93		      STA	score
   1986  f59c				   .
   1987  f59c							;
   1988  f59c
   1989  f59c				   .L028		;  playfield:
   1990  f59c
   1991  f59c				  -	      ifconst	pfres
   1992  f59c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1993  f59c					      else
   1994  f59c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1995  f59e					      endif
   1996  f59e		       4c cd f5 	      jmp	pflabel2
   1997  f5a1				   PF_data2
   1998  f5a1		       d4 80		      .byte.b	%11010100, %10000000
   1999  f5a3					      if	(pfwidth>2)
   2000  f5a3		       00 f4		      .byte.b	%00000000, %11110100
   2001  f5a5					      endif
   2002  f5a5		       a4 00		      .byte.b	%10100100, %00000000
   2003  f5a7					      if	(pfwidth>2)
   2004  f5a7		       00 94		      .byte.b	%00000000, %10010100
   2005  f5a9					      endif
   2006  f5a9		       f4 80		      .byte.b	%11110100, %10000000
   2007  f5ab					      if	(pfwidth>2)
   2008  f5ab		       00 94		      .byte.b	%00000000, %10010100
   2009  f5ad					      endif
   2010  f5ad		       04 00		      .byte.b	%00000100, %00000000
   2011  f5af					      if	(pfwidth>2)
   2012  f5af		       00 04		      .byte.b	%00000000, %00000100
   2013  f5b1					      endif
   2014  f5b1		       f4 80		      .byte.b	%11110100, %10000000
   2015  f5b3					      if	(pfwidth>2)
   2016  f5b3		       00 f4		      .byte.b	%00000000, %11110100
   2017  f5b5					      endif
   2018  f5b5		       a4 00		      .byte.b	%10100100, %00000000
   2019  f5b7					      if	(pfwidth>2)
   2020  f5b7		       00 a4		      .byte.b	%00000000, %10100100
   2021  f5b9					      endif
   2022  f5b9		       f4 80		      .byte.b	%11110100, %10000000
   2023  f5bb					      if	(pfwidth>2)
   2024  f5bb		       00 f4		      .byte.b	%00000000, %11110100
   2025  f5bd					      endif
   2026  f5bd		       04 00		      .byte.b	%00000100, %00000000
   2027  f5bf					      if	(pfwidth>2)
   2028  f5bf		       00 04		      .byte.b	%00000000, %00000100
   2029  f5c1					      endif
   2030  f5c1		       94 80		      .byte.b	%10010100, %10000000
   2031  f5c3					      if	(pfwidth>2)
   2032  f5c3		       00 f4		      .byte.b	%00000000, %11110100
   2033  f5c5					      endif
   2034  f5c5		       94 00		      .byte.b	%10010100, %00000000
   2035  f5c7					      if	(pfwidth>2)
   2036  f5c7		       00 a4		      .byte.b	%00000000, %10100100
   2037  f5c9					      endif
   2038  f5c9		       f4 80		      .byte.b	%11110100, %10000000
   2039  f5cb					      if	(pfwidth>2)
   2040  f5cb		       00 d4		      .byte.b	%00000000, %11010100
   2041  f5cd					      endif
   2042  f5cd				   pflabel2
   2043  f5cd		       bd a1 f5 	      lda	PF_data2,x
   2044  f5d0		       95 a4		      sta	playfield,x
   2045  f5d2		       ca		      dex
   2046  f5d3		       10 f8		      bpl	pflabel2
   2047  f5d5				   .
   2048  f5d5							;
   2049  f5d5
   2050  f5d5				   .
   2051  f5d5							;
   2052  f5d5
   2053  f5d5				   .L029		;  player0:
   2054  f5d5
   2055  f5d5		       a2 21		      LDX	#<playerL029_0
   2056  f5d7		       86 8a		      STX	player0pointerlo
   2057  f5d9		       a9 f7		      LDA	#>playerL029_0
   2058  f5db		       85 8b		      STA	player0pointerhi
   2059  f5dd		       a9 07		      LDA	#7
   2060  f5df		       85 8e		      STA	player0height
   2061  f5e1				   .
   2062  f5e1							;
   2063  f5e1
   2064  f5e1				   .L030		;  player1:
   2065  f5e1
   2066  f5e1		       a2 29		      LDX	#<playerL030_1
   2067  f5e3		       86 8c		      STX	player1pointerlo
   2068  f5e5		       a9 f7		      LDA	#>playerL030_1
   2069  f5e7		       85 8d		      STA	player1pointerhi
   2070  f5e9		       a9 07		      LDA	#7
   2071  f5eb		       85 8f		      STA	player1height
   2072  f5ed				   .
   2073  f5ed							;
   2074  f5ed
   2075  f5ed				   .
   2076  f5ed							;
   2077  f5ed
   2078  f5ed				   .
   2079  f5ed							;
   2080  f5ed
   2081  f5ed				   .
   2082  f5ed							;
   2083  f5ed
   2084  f5ed				   .
   2085  f5ed							;
   2086  f5ed
   2087  f5ed				   .mainloop
   2088  f5ed							; mainloop
   2089  f5ed
   2090  f5ed				   .
   2091  f5ed							;
   2092  f5ed
   2093  f5ed				   .L031		;  rem Joystick controls
   2094  f5ed
   2095  f5ed				   .L032		;  if joy0left then player0x  =  player0x  -  2
   2096  f5ed
   2097  f5ed		       2c 80 02 	      bit	SWCHA
   2098  f5f0		       70 07		      BVS	.skipL032
   2099  f5f2				   .condpart7
   2100  f5f2		       a5 80		      LDA	player0x
   2101  f5f4		       38		      SEC
   2102  f5f5		       e9 02		      SBC	#2
   2103  f5f7		       85 80		      STA	player0x
   2104  f5f9				   .skipL032
   2105  f5f9				   .L033		;  if joy0right then player0x	=  player0x  +	2
   2106  f5f9
   2107  f5f9		       2c 80 02 	      bit	SWCHA
   2108  f5fc		       30 07		      BMI	.skipL033
   2109  f5fe				   .condpart8
   2110  f5fe		       a5 80		      LDA	player0x
   2111  f600		       18		      CLC
   2112  f601		       69 02		      ADC	#2
   2113  f603		       85 80		      STA	player0x
   2114  f605				   .skipL033
   2115  f605				   .L034		;  if joy0up then player0y  =	player0y  -  2
   2116  f605
   2117  f605		       a9 10		      lda	#$10
   2118  f607		       2c 80 02 	      bit	SWCHA
   2119  f60a		       d0 07		      BNE	.skipL034
   2120  f60c				   .condpart9
   2121  f60c		       a5 85		      LDA	player0y
   2122  f60e		       38		      SEC
   2123  f60f		       e9 02		      SBC	#2
   2124  f611		       85 85		      STA	player0y
   2125  f613				   .skipL034
   2126  f613				   .L035		;  if joy0down then mph  =  mph  -  1
   2127  f613
   2128  f613		       a9 20		      lda	#$20
   2129  f615		       2c 80 02 	      bit	SWCHA
   2130  f618		       d0 02		      BNE	.skipL035
   2131  f61a				   .condpart10
   2132  f61a		       c6 d6		      DEC	mph
   2133  f61c				   .skipL035
   2134  f61c				   .
   2135  f61c							;
   2136  f61c
   2137  f61c				   .
   2138  f61c							;
   2139  f61c
   2140  f61c				   .L036		;  rem if player hits wall, then slam them back some and away from wall.
   2141  f61c
   2142  f61c				   .L037		;  if player0x >= 113 then player0y  =  player0y  +  2 : player0x  =  111 : mph = mph - 5
   2143  f61c
   2144  f61c		       a5 80		      LDA	player0x
   2145  f61e		       c9 71		      CMP	#113
   2146  f620		       90 12		      BCC	.skipL037
   2147  f622				   .condpart11
   2148  f622		       a5 85		      LDA	player0y
   2149  f624		       18		      CLC
   2150  f625		       69 02		      ADC	#2
   2151  f627		       85 85		      STA	player0y
   2152  f629		       a9 6f		      LDA	#111
   2153  f62b		       85 80		      STA	player0x
   2154  f62d		       a5 d6		      LDA	mph
   2155  f62f		       38		      SEC
   2156  f630		       e9 05		      SBC	#5
   2157  f632		       85 d6		      STA	mph
   2158  f634				   .skipL037
   2159  f634				   .L038		;  if player0x <= 41 then player0y  =	player0y  +  2 : player0x  =  43 : mph = mph - 5
   2160  f634
   2161  f634		       a9 29		      LDA	#41
   2162  f636		       c5 80		      CMP	player0x
   2163  f638		       90 12		      BCC	.skipL038
   2164  f63a				   .condpart12
   2165  f63a		       a5 85		      LDA	player0y
   2166  f63c		       18		      CLC
   2167  f63d		       69 02		      ADC	#2
   2168  f63f		       85 85		      STA	player0y
   2169  f641		       a9 2b		      LDA	#43
   2170  f643		       85 80		      STA	player0x
   2171  f645		       a5 d6		      LDA	mph
   2172  f647		       38		      SEC
   2173  f648		       e9 05		      SBC	#5
   2174  f64a		       85 d6		      STA	mph
   2175  f64c				   .skipL038
   2176  f64c				   .
   2177  f64c							;
   2178  f64c
   2179  f64c				   .
   2180  f64c							;
   2181  f64c
   2182  f64c				   .L039		;  rem if the car hits the boundary, then start speeding up
   2183  f64c
   2184  f64c				   .L040		;  if player0y < 70 then player0y  =  70 :  mph  =  mph  +  1
   2185  f64c
   2186  f64c		       a5 85		      LDA	player0y
   2187  f64e		       c9 46		      CMP	#70
   2188  f650		       b0 06		      BCS	.skipL040
   2189  f652				   .condpart13
   2190  f652		       a9 46		      LDA	#70
   2191  f654		       85 85		      STA	player0y
   2192  f656		       e6 d6		      INC	mph
   2193  f658				   .skipL040
   2194  f658				   .
   2195  f658							;
   2196  f658
   2197  f658				   .L041		;  rem set up vertical boundary to prevent driver from going off screen.
   2198  f658
   2199  f658				   .L042		;  if player0y > 87 then player0y  =  87
   2200  f658
   2201  f658		       a9 57		      LDA	#87
   2202  f65a		       c5 85		      CMP	player0y
   2203  f65c		       b0 04		      BCS	.skipL042
   2204  f65e				   .condpart14
   2205  f65e		       a9 57		      LDA	#87
   2206  f660		       85 85		      STA	player0y
   2207  f662				   .skipL042
   2208  f662				   .
   2209  f662							;
   2210  f662
   2211  f662				   .L043		;  if mph  <  1 then mph  =  1
   2212  f662
   2213  f662		       a5 d6		      LDA	mph
   2214  f664		       c9 01		      CMP	#1
   2215  f666		       b0 04		      BCS	.skipL043
   2216  f668				   .condpart15
   2217  f668		       a9 01		      LDA	#1
   2218  f66a		       85 d6		      STA	mph
   2219  f66c				   .skipL043
   2220  f66c				   .L044		;  if mph  >  100 then mph  =	100
   2221  f66c
   2222  f66c		       a9 64		      LDA	#100
   2223  f66e		       c5 d6		      CMP	mph
   2224  f670		       b0 04		      BCS	.skipL044
   2225  f672				   .condpart16
   2226  f672		       a9 64		      LDA	#100
   2227  f674		       85 d6		      STA	mph
   2228  f676				   .skipL044
   2229  f676				   .
   2230  f676							;
   2231  f676
   2232  f676				   .
   2233  f676							;
   2234  f676
   2235  f676				   .L045		;  badguymph  =  mph / 20
   2236  f676
   2237  f676		       a5 d6		      LDA	mph
   2238  f678		       a0 14		      LDY	#20
   2239  f67a		       20 6f f4 	      jsr	div8
   2240  f67d		       85 d7		      STA	badguymph
   2241  f67f				   .
   2242  f67f							;
   2243  f67f
   2244  f67f				   .L046		;  if badguymph < 1 then badguymph  =	1
   2245  f67f
   2246  f67f		       a5 d7		      LDA	badguymph
   2247  f681		       c9 01		      CMP	#1
   2248  f683		       b0 04		      BCS	.skipL046
   2249  f685				   .condpart17
   2250  f685		       a9 01		      LDA	#1
   2251  f687		       85 d7		      STA	badguymph
   2252  f689				   .skipL046
   2253  f689				   .L047		;  player1y  =  player1y  +  badguymph
   2254  f689
   2255  f689		       a5 86		      LDA	player1y
   2256  f68b		       18		      CLC
   2257  f68c		       65 d7		      ADC	badguymph
   2258  f68e		       85 86		      STA	player1y
   2259  f690				   .
   2260  f690							;
   2261  f690
   2262  f690				   .
   2263  f690							;
   2264  f690
   2265  f690				   .L048		;  if player1y  >  110 then player1y  =  0 : player1x	=   ( rand & 63 )  + 46
   2266  f690
   2267  f690		       a9 6e		      LDA	#110
   2268  f692		       c5 86		      CMP	player1y
   2269  f694		       b0 0e		      BCS	.skipL048
   2270  f696				   .condpart18
   2271  f696		       a9 00		      LDA	#0
   2272  f698		       85 86		      STA	player1y
   2273  f69a							; complex statement detected
   2274  f69a		       20 b3 f3 	      jsr	randomize
   2275  f69d		       29 3f		      AND	#63
   2276  f69f		       18		      CLC
   2277  f6a0		       69 2e		      ADC	#46
   2278  f6a2		       85 81		      STA	player1x
   2279  f6a4				   .skipL048
   2280  f6a4				   .
   2281  f6a4							;
   2282  f6a4
   2283  f6a4				   .L049		;  score  =  score  +	badguymph
   2284  f6a4
   2285  f6a4		       f8		      SED
   2286  f6a5		       18		      CLC
   2287  f6a6		       a5 95		      LDA	score+2
   2288  f6a8		       65 d7		      ADC	badguymph
   2289  f6aa
   2290  f6aa		       85 95		      STA	score+2
   2291  f6ac		       a5 94		      LDA	score+1
   2292  f6ae		       69 00		      ADC	#0
   2293  f6b0		       85 94		      STA	score+1
   2294  f6b2		       a5 93		      LDA	score
   2295  f6b4		       69 00		      ADC	#0
   2296  f6b6		       85 93		      STA	score
   2297  f6b8		       d8		      CLD
   2298  f6b9				   .
   2299  f6b9							;
   2300  f6b9
   2301  f6b9				   .L050		;  if collision(player0,player1) then goto loseloop
   2302  f6b9
   2303  f6b9		       24 07		      bit	CXPPMM
   2304  f6bb		       10 03		      BPL	.skipL050
   2305  f6bd				   .condpart19
   2306  f6bd		       4c cf f6 	      jmp	.loseloop
   2307  f6c0
   2308  f6c0				   .skipL050
   2309  f6c0				   .
   2310  f6c0							;
   2311  f6c0
   2312  f6c0				   .
   2313  f6c0							;
   2314  f6c0
   2315  f6c0				   .
   2316  f6c0							;
   2317  f6c0
   2318  f6c0				   .renderloop
   2319  f6c0							; renderloop
   2320  f6c0
   2321  f6c0				   .
   2322  f6c0							;
   2323  f6c0
   2324  f6c0				   .L051		;  if !switchleftb then NUSIZ1  =  $06
   2325  f6c0
   2326  f6c0		       2c 82 02 	      bit	SWCHB
   2327  f6c3		       50 04		      BVC	.skipL051
   2328  f6c5				   .condpart20
   2329  f6c5		       a9 06		      LDA	#$06
   2330  f6c7		       85 05		      STA	NUSIZ1
   2331  f6c9				   .skipL051
   2332  f6c9				   .
   2333  f6c9							;
   2334  f6c9
   2335  f6c9				   .L052		;  drawscreen
   2336  f6c9
   2337  f6c9		       20 bd f3 	      jsr	drawscreen
   2338  f6cc				   .L053		;  goto mainloop
   2339  f6cc
   2340  f6cc		       4c ed f5 	      jmp	.mainloop
   2341  f6cf
   2342  f6cf				   .
   2343  f6cf							;
   2344  f6cf
   2345  f6cf				   .
   2346  f6cf							;
   2347  f6cf
   2348  f6cf				   .
   2349  f6cf							;
   2350  f6cf
   2351  f6cf				   .loseloop
   2352  f6cf							; loseloop
   2353  f6cf
   2354  f6cf				   .L054		;  drawscreen
   2355  f6cf
   2356  f6cf		       20 bd f3 	      jsr	drawscreen
   2357  f6d2				   .L055		;  AUDV0  =  10
   2358  f6d2
   2359  f6d2		       a9 0a		      LDA	#10
   2360  f6d4		       85 19		      STA	AUDV0
   2361  f6d6				   .L056		;  AUDC0  =  8
   2362  f6d6
   2363  f6d6		       a9 08		      LDA	#8
   2364  f6d8		       85 15		      STA	AUDC0
   2365  f6da				   .L057		;  AUDF0  =  10
   2366  f6da
   2367  f6da		       a9 0a		      LDA	#10
   2368  f6dc		       85 17		      STA	AUDF0
   2369  f6de				   .
   2370  f6de							;
   2371  f6de
   2372  f6de				   .L058		;  if joy0fire then goto gameinit
   2373  f6de
   2374  f6de		       24 0c		      bit	INPT4
   2375  f6e0		       30 03		      BMI	.skipL058
   2376  f6e2				   .condpart21
   2377  f6e2		       4c 48 f5 	      jmp	.gameinit
   2378  f6e5
   2379  f6e5				   .skipL058
   2380  f6e5				   .
   2381  f6e5							;
   2382  f6e5
   2383  f6e5				   .L059		;  playfield:
   2384  f6e5
   2385  f6e5				  -	      ifconst	pfres
   2386  f6e5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2387  f6e5					      else
   2388  f6e5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2389  f6e7					      endif
   2390  f6e7		       4c 16 f7 	      jmp	pflabel3
   2391  f6ea				   PF_data3
   2392  f6ea		       00 00		      .byte.b	%00000000, %00000000
   2393  f6ec					      if	(pfwidth>2)
   2394  f6ec		       00 00		      .byte.b	%00000000, %00000000
   2395  f6ee					      endif
   2396  f6ee		       03 00		      .byte.b	%00000011, %00000000
   2397  f6f0					      if	(pfwidth>2)
   2398  f6f0		       00 03		      .byte.b	%00000000, %00000011
   2399  f6f2					      endif
   2400  f6f2		       03 00		      .byte.b	%00000011, %00000000
   2401  f6f4					      if	(pfwidth>2)
   2402  f6f4		       00 03		      .byte.b	%00000000, %00000011
   2403  f6f6					      endif
   2404  f6f6		       00 00		      .byte.b	%00000000, %00000000
   2405  f6f8					      if	(pfwidth>2)
   2406  f6f8		       00 00		      .byte.b	%00000000, %00000000
   2407  f6fa					      endif
   2408  f6fa		       00 00		      .byte.b	%00000000, %00000000
   2409  f6fc					      if	(pfwidth>2)
   2410  f6fc		       00 00		      .byte.b	%00000000, %00000000
   2411  f6fe					      endif
   2412  f6fe		       00 00		      .byte.b	%00000000, %00000000
   2413  f700					      if	(pfwidth>2)
   2414  f700		       00 00		      .byte.b	%00000000, %00000000
   2415  f702					      endif
   2416  f702		       0f ff		      .byte.b	%00001111, %11111111
   2417  f704					      if	(pfwidth>2)
   2418  f704		       ff 0f		      .byte.b	%11111111, %00001111
   2419  f706					      endif
   2420  f706		       1c 00		      .byte.b	%00011100, %00000000
   2421  f708					      if	(pfwidth>2)
   2422  f708		       00 1c		      .byte.b	%00000000, %00011100
   2423  f70a					      endif
   2424  f70a		       18 00		      .byte.b	%00011000, %00000000
   2425  f70c					      if	(pfwidth>2)
   2426  f70c		       00 18		      .byte.b	%00000000, %00011000
   2427  f70e					      endif
   2428  f70e		       18 00		      .byte.b	%00011000, %00000000
   2429  f710					      if	(pfwidth>2)
   2430  f710		       00 18		      .byte.b	%00000000, %00011000
   2431  f712					      endif
   2432  f712		       00 00		      .byte.b	%00000000, %00000000
   2433  f714					      if	(pfwidth>2)
   2434  f714		       00 00		      .byte.b	%00000000, %00000000
   2435  f716					      endif
   2436  f716				   pflabel3
   2437  f716		       bd ea f6 	      lda	PF_data3,x
   2438  f719		       95 a4		      sta	playfield,x
   2439  f71b		       ca		      dex
   2440  f71c		       10 f8		      bpl	pflabel3
   2441  f71e				   .
   2442  f71e							;
   2443  f71e
   2444  f71e				   .L060		;  goto loseloop
   2445  f71e
   2446  f71e		       4c cf f6 	      jmp	.loseloop
   2447  f721
   2448  f721				   .
   2449  f721							;
   2450  f721
   2451  f721				  -	      if	(<*) > (<(*+7))
   2452  f721				  -	      repeat	($100-<*)
   2453  f721				  -	      .byte	0
   2454  f721				  -	      repend
   2455  f721					      endif
   2456  f721				   playerL029_0
   2457  f721		       bd		      .byte.b	%10111101
   2458  f722		       ff		      .byte.b	%11111111
   2459  f723		       bd		      .byte.b	%10111101
   2460  f724		       3c		      .byte.b	%00111100
   2461  f725		       3c		      .byte.b	%00111100
   2462  f726		       bd		      .byte.b	%10111101
   2463  f727		       ff		      .byte.b	%11111111
   2464  f728		       99		      .byte.b	%10011001
   2465  f729				  -	      if	(<*) > (<(*+7))
   2466  f729				  -	      repeat	($100-<*)
   2467  f729				  -	      .byte	0
   2468  f729				  -	      repend
   2469  f729					      endif
   2470  f729				   playerL030_1
   2471  f729		       99		      .byte.b	%10011001
   2472  f72a		       f7		      .byte.b	%11110111
   2473  f72b		       ad		      .byte.b	%10101101
   2474  f72c		       34		      .byte.b	%00110100
   2475  f72d		       2c		      .byte.b	%00101100
   2476  f72e		       b5		      .byte.b	%10110101
   2477  f72f		       ef		      .byte.b	%11101111
   2478  f730		       b5		      .byte.b	%10110101
   2479  f731					      if	ECHOFIRST
      2155 bytes of ROM space left
   2480  f731					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   2481  f731					      endif
   2482  f731		       00 01	   ECHOFIRST  =	1
   2483  f731
   2484  f731
   2485  f731
   2486  f731							; feel free to modify the score graphics - just keep each digit 8 high
   2487  f731							; and keep the conditional compilation stuff intact
   2488  f731				  -	      ifconst	ROM2k
   2489  f731				  -	      ORG	$F7AC-8
   2490  f731					      else
   2491  f731				  -	      ifconst	bankswitch
   2492  f731				  -	      if	bankswitch == 8
   2493  f731				  -	      ORG	$2F94-bscode_length
   2494  f731				  -	      RORG	$FF94-bscode_length
   2495  f731				  -	      endif
   2496  f731				  -	      if	bankswitch == 16
   2497  f731				  -	      ORG	$4F94-bscode_length
   2498  f731				  -	      RORG	$FF94-bscode_length
   2499  f731				  -	      endif
   2500  f731				  -	      if	bankswitch == 32
   2501  f731				  -	      ORG	$8F94-bscode_length
   2502  f731				  -	      RORG	$FF94-bscode_length
   2503  f731				  -	      endif
   2504  f731				  -	      if	bankswitch == 64
   2505  f731				  -	      ORG	$10F80-bscode_length
   2506  f731				  -	      RORG	$1FF80-bscode_length
   2507  f731				  -	      endif
   2508  f731					      else
   2509  ff9c					      ORG	$FF9C
   2510  ff9c					      endif
   2511  ff9c					      endif
   2512  ff9c
   2513  ff9c							; font equates
   2514  ff9c		       00 01	   .21stcentury =	1
   2515  ff9c		       00 02	   alarmclock =	2
   2516  ff9c		       00 03	   handwritten =	3
   2517  ff9c		       00 04	   interrupted =	4
   2518  ff9c		       00 05	   retroputer =	5
   2519  ff9c		       00 06	   whimsey    =	6
   2520  ff9c		       00 07	   tiny       =	7
   2521  ff9c
   2522  ff9c				   scoretable
   2523  ff9c
   2524  ff9c				  -	      ifconst	font
   2525  ff9c				  -	      if	font == .21stcentury
   2526  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   2527  ff9c				  -	      endif
   2528  ff9c				  -	      if	font == alarmclock
   2529  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   2530  ff9c				  -	      endif
   2531  ff9c				  -	      if	font == handwritten
   2532  ff9c				  -	      include	"score_graphics.asm.handwritten"
   2533  ff9c				  -	      endif
   2534  ff9c				  -	      if	font == interrupted
   2535  ff9c				  -	      include	"score_graphics.asm.interrupted"
   2536  ff9c				  -	      endif
   2537  ff9c				  -	      if	font == retroputer
   2538  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2539  ff9c				  -	      endif
   2540  ff9c				  -	      if	font == whimsey
   2541  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2542  ff9c				  -	      endif
   2543  ff9c				  -	      if	font == tiny
   2544  ff9c				  -	      include	"score_graphics.asm.tiny"
   2545  ff9c				  -	      endif
   2546  ff9c					      else		; default font
   2547  ff9c
   2548  ff9c		       3c		      .byte.b	%00111100
   2549  ff9d		       66		      .byte.b	%01100110
   2550  ff9e		       66		      .byte.b	%01100110
   2551  ff9f		       66		      .byte.b	%01100110
   2552  ffa0		       66		      .byte.b	%01100110
   2553  ffa1		       66		      .byte.b	%01100110
   2554  ffa2		       66		      .byte.b	%01100110
   2555  ffa3		       3c		      .byte.b	%00111100
   2556  ffa4
   2557  ffa4		       7e		      .byte.b	%01111110
   2558  ffa5		       18		      .byte.b	%00011000
   2559  ffa6		       18		      .byte.b	%00011000
   2560  ffa7		       18		      .byte.b	%00011000
   2561  ffa8		       18		      .byte.b	%00011000
   2562  ffa9		       38		      .byte.b	%00111000
   2563  ffaa		       18		      .byte.b	%00011000
   2564  ffab		       08		      .byte.b	%00001000
   2565  ffac
   2566  ffac		       7e		      .byte.b	%01111110
   2567  ffad		       60		      .byte.b	%01100000
   2568  ffae		       60		      .byte.b	%01100000
   2569  ffaf		       3c		      .byte.b	%00111100
   2570  ffb0		       06		      .byte.b	%00000110
   2571  ffb1		       06		      .byte.b	%00000110
   2572  ffb2		       46		      .byte.b	%01000110
   2573  ffb3		       3c		      .byte.b	%00111100
   2574  ffb4
   2575  ffb4		       3c		      .byte.b	%00111100
   2576  ffb5		       46		      .byte.b	%01000110
   2577  ffb6		       06		      .byte.b	%00000110
   2578  ffb7		       06		      .byte.b	%00000110
   2579  ffb8		       1c		      .byte.b	%00011100
   2580  ffb9		       06		      .byte.b	%00000110
   2581  ffba		       46		      .byte.b	%01000110
   2582  ffbb		       3c		      .byte.b	%00111100
   2583  ffbc
   2584  ffbc		       0c		      .byte.b	%00001100
   2585  ffbd		       0c		      .byte.b	%00001100
   2586  ffbe		       7e		      .byte.b	%01111110
   2587  ffbf		       4c		      .byte.b	%01001100
   2588  ffc0		       4c		      .byte.b	%01001100
   2589  ffc1		       2c		      .byte.b	%00101100
   2590  ffc2		       1c		      .byte.b	%00011100
   2591  ffc3		       0c		      .byte.b	%00001100
   2592  ffc4
   2593  ffc4		       3c		      .byte.b	%00111100
   2594  ffc5		       46		      .byte.b	%01000110
   2595  ffc6		       06		      .byte.b	%00000110
   2596  ffc7		       06		      .byte.b	%00000110
   2597  ffc8		       3c		      .byte.b	%00111100
   2598  ffc9		       60		      .byte.b	%01100000
   2599  ffca		       60		      .byte.b	%01100000
   2600  ffcb		       7e		      .byte.b	%01111110
   2601  ffcc
   2602  ffcc		       3c		      .byte.b	%00111100
   2603  ffcd		       66		      .byte.b	%01100110
   2604  ffce		       66		      .byte.b	%01100110
   2605  ffcf		       66		      .byte.b	%01100110
   2606  ffd0		       7c		      .byte.b	%01111100
   2607  ffd1		       60		      .byte.b	%01100000
   2608  ffd2		       62		      .byte.b	%01100010
   2609  ffd3		       3c		      .byte.b	%00111100
   2610  ffd4
   2611  ffd4		       30		      .byte.b	%00110000
   2612  ffd5		       30		      .byte.b	%00110000
   2613  ffd6		       30		      .byte.b	%00110000
   2614  ffd7		       18		      .byte.b	%00011000
   2615  ffd8		       0c		      .byte.b	%00001100
   2616  ffd9		       06		      .byte.b	%00000110
   2617  ffda		       42		      .byte.b	%01000010
   2618  ffdb		       3e		      .byte.b	%00111110
   2619  ffdc
   2620  ffdc		       3c		      .byte.b	%00111100
   2621  ffdd		       66		      .byte.b	%01100110
   2622  ffde		       66		      .byte.b	%01100110
   2623  ffdf		       66		      .byte.b	%01100110
   2624  ffe0		       3c		      .byte.b	%00111100
   2625  ffe1		       66		      .byte.b	%01100110
   2626  ffe2		       66		      .byte.b	%01100110
   2627  ffe3		       3c		      .byte.b	%00111100
   2628  ffe4
   2629  ffe4		       3c		      .byte.b	%00111100
   2630  ffe5		       46		      .byte.b	%01000110
   2631  ffe6		       06		      .byte.b	%00000110
   2632  ffe7		       3e		      .byte.b	%00111110
   2633  ffe8		       66		      .byte.b	%01100110
   2634  ffe9		       66		      .byte.b	%01100110
   2635  ffea		       66		      .byte.b	%01100110
   2636  ffeb		       3c		      .byte.b	%00111100
   2637  ffec
   2638  ffec					      ifnconst	DPC_kernel_options
   2639  ffec
   2640  ffec		       00		      .byte.b	%00000000
   2641  ffed		       00		      .byte.b	%00000000
   2642  ffee		       00		      .byte.b	%00000000
   2643  ffef		       00		      .byte.b	%00000000
   2644  fff0		       00		      .byte.b	%00000000
   2645  fff1		       00		      .byte.b	%00000000
   2646  fff2		       00		      .byte.b	%00000000
   2647  fff3		       00		      .byte.b	%00000000
   2648  fff4
   2649  fff4					      endif
   2650  fff4
   2651  fff4					      endif
   2652  fff4
   2653  fff4				  -	      ifconst	ROM2k
   2654  fff4				  -	      ORG	$F7FC
   2655  fff4					      else
   2656  fff4				  -	      ifconst	bankswitch
   2657  fff4				  -	      if	bankswitch == 8
   2658  fff4				  -	      ORG	$2FF4-bscode_length
   2659  fff4				  -	      RORG	$FFF4-bscode_length
   2660  fff4				  -	      endif
   2661  fff4				  -	      if	bankswitch == 16
   2662  fff4				  -	      ORG	$4FF4-bscode_length
   2663  fff4				  -	      RORG	$FFF4-bscode_length
   2664  fff4				  -	      endif
   2665  fff4				  -	      if	bankswitch == 32
   2666  fff4				  -	      ORG	$8FF4-bscode_length
   2667  fff4				  -	      RORG	$FFF4-bscode_length
   2668  fff4				  -	      endif
   2669  fff4				  -	      if	bankswitch == 64
   2670  fff4				  -	      ORG	$10FE0-bscode_length
   2671  fff4				  -	      RORG	$1FFE0-bscode_length
   2672  fff4				  -	      endif
   2673  fff4					      else
   2674  fffc					      ORG	$FFFC
   2675  fffc					      endif
   2676  fffc					      endif
   2677  fffc				  -	      ifconst	bankswitch
   2678  fffc				  -	      if	bankswitch == 8
   2679  fffc				  -	      ORG	$2FFC
   2680  fffc				  -	      RORG	$FFFC
   2681  fffc				  -	      endif
   2682  fffc				  -	      if	bankswitch == 16
   2683  fffc				  -	      ORG	$4FFC
   2684  fffc				  -	      RORG	$FFFC
   2685  fffc				  -	      endif
   2686  fffc				  -	      if	bankswitch == 32
   2687  fffc				  -	      ORG	$8FFC
   2688  fffc				  -	      RORG	$FFFC
   2689  fffc				  -	      endif
   2690  fffc				  -	      if	bankswitch == 64
   2691  fffc				  -	      ORG	$10FF0
   2692  fffc				  -	      RORG	$1FFF0
   2693  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2694  fffc				  -	      ORG	$10FF8
   2695  fffc				  -	      RORG	$1FFF8
   2696  fffc				  -	      ifconst	superchip
   2697  fffc				  -	      .byte	"E","F","S","C"
   2698  fffc				  -	      else
   2699  fffc				  -	      .byte	"E","F","E","F"
   2700  fffc				  -	      endif
   2701  fffc				  -	      ORG	$10FFC
   2702  fffc				  -	      RORG	$1FFFC
   2703  fffc				  -	      endif
   2704  fffc					      else
   2705  fffc				  -	      ifconst	ROM2k
   2706  fffc				  -	      ORG	$F7FC
   2707  fffc					      else
   2708  fffc					      ORG	$FFFC
   2709  fffc					      endif
   2710  fffc					      endif
   2711  fffc		       00 f0		      .word.w	start
   2712  fffe		       00 f0		      .word.w	start
